
proyecto_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004710  08004710  000204b8  2**0
                  CONTENTS
  4 .ARM          00000000  08004710  08004710  000204b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004710  08004710  000204b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004714  08004714  00014714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004b8  20000000  08004718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200004b8  08004bd0  000204b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  08004bd0  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebd4  00000000  00000000  000204e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000263b  00000000  00000000  0002f0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000316f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00032468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001882c  00000000  00000000  000330b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001072f  00000000  00000000  0004b8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ada5  00000000  00000000  0005c00b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6db0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003568  00000000  00000000  000e6e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200004b8 	.word	0x200004b8
 8000128:	00000000 	.word	0x00000000
 800012c:	080046a0 	.word	0x080046a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200004bc 	.word	0x200004bc
 8000148:	080046a0 	.word	0x080046a0

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b47      	ldr	r3, [pc, #284]	; (8000280 <MX_GPIO_Init+0x134>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a46      	ldr	r2, [pc, #280]	; (8000280 <MX_GPIO_Init+0x134>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b44      	ldr	r3, [pc, #272]	; (8000280 <MX_GPIO_Init+0x134>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b41      	ldr	r3, [pc, #260]	; (8000280 <MX_GPIO_Init+0x134>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a40      	ldr	r2, [pc, #256]	; (8000280 <MX_GPIO_Init+0x134>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b3e      	ldr	r3, [pc, #248]	; (8000280 <MX_GPIO_Init+0x134>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b3b      	ldr	r3, [pc, #236]	; (8000280 <MX_GPIO_Init+0x134>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a3a      	ldr	r2, [pc, #232]	; (8000280 <MX_GPIO_Init+0x134>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b38      	ldr	r3, [pc, #224]	; (8000280 <MX_GPIO_Init+0x134>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, stepper_in_1_Pin|stepper_in_2_Pin|stepper_in_3_Pin|stepper_in_4_Pin
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80001ae:	4835      	ldr	r0, [pc, #212]	; (8000284 <MX_GPIO_Init+0x138>)
 80001b0:	f001 fa98 	bl	80016e4 <HAL_GPIO_WritePin>
                          |led_proceso_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80001ba:	4833      	ldr	r0, [pc, #204]	; (8000288 <MX_GPIO_Init+0x13c>)
 80001bc:	f001 fa92 	bl	80016e4 <HAL_GPIO_WritePin>
                          |LCD_EN_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = stepper_in_1_Pin|stepper_in_2_Pin|stepper_in_3_Pin|stepper_in_4_Pin
 80001c0:	f44f 73bc 	mov.w	r3, #376	; 0x178
 80001c4:	613b      	str	r3, [r7, #16]
                          |led_proceso_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c6:	2301      	movs	r3, #1
 80001c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ca:	2300      	movs	r3, #0
 80001cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001d2:	f107 0310 	add.w	r3, r7, #16
 80001d6:	4619      	mov	r1, r3
 80001d8:	482a      	ldr	r0, [pc, #168]	; (8000284 <MX_GPIO_Init+0x138>)
 80001da:	f001 f8ff 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = sensor_1_Pin;
 80001de:	2380      	movs	r3, #128	; 0x80
 80001e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001e2:	4b2a      	ldr	r3, [pc, #168]	; (800028c <MX_GPIO_Init+0x140>)
 80001e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001e6:	2301      	movs	r3, #1
 80001e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(sensor_1_GPIO_Port, &GPIO_InitStruct);
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	4619      	mov	r1, r3
 80001f0:	4824      	ldr	r0, [pc, #144]	; (8000284 <MX_GPIO_Init+0x138>)
 80001f2:	f001 f8f3 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = sensor_2_Pin;
 80001f6:	2301      	movs	r3, #1
 80001f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001fa:	4b24      	ldr	r3, [pc, #144]	; (800028c <MX_GPIO_Init+0x140>)
 80001fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001fe:	2301      	movs	r3, #1
 8000200:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(sensor_2_GPIO_Port, &GPIO_InitStruct);
 8000202:	f107 0310 	add.w	r3, r7, #16
 8000206:	4619      	mov	r1, r3
 8000208:	481f      	ldr	r0, [pc, #124]	; (8000288 <MX_GPIO_Init+0x13c>)
 800020a:	f001 f8e7 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = pulsador_parada_Pin;
 800020e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000214:	4b1e      	ldr	r3, [pc, #120]	; (8000290 <MX_GPIO_Init+0x144>)
 8000216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000218:	2302      	movs	r3, #2
 800021a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(pulsador_parada_GPIO_Port, &GPIO_InitStruct);
 800021c:	f107 0310 	add.w	r3, r7, #16
 8000220:	4619      	mov	r1, r3
 8000222:	4818      	ldr	r0, [pc, #96]	; (8000284 <MX_GPIO_Init+0x138>)
 8000224:	f001 f8da 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8000228:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 800022c:	613b      	str	r3, [r7, #16]
                          |LCD_EN_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022e:	2301      	movs	r3, #1
 8000230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000236:	2302      	movs	r3, #2
 8000238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800023a:	f107 0310 	add.w	r3, r7, #16
 800023e:	4619      	mov	r1, r3
 8000240:	4811      	ldr	r0, [pc, #68]	; (8000288 <MX_GPIO_Init+0x13c>)
 8000242:	f001 f8cb 	bl	80013dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	2100      	movs	r1, #0
 800024a:	2006      	movs	r0, #6
 800024c:	f000 ffdd 	bl	800120a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000250:	2006      	movs	r0, #6
 8000252:	f000 fff6 	bl	8001242 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000256:	2200      	movs	r2, #0
 8000258:	2101      	movs	r1, #1
 800025a:	2017      	movs	r0, #23
 800025c:	f000 ffd5 	bl	800120a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000260:	2017      	movs	r0, #23
 8000262:	f000 ffee 	bl	8001242 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000266:	2200      	movs	r2, #0
 8000268:	2100      	movs	r1, #0
 800026a:	2028      	movs	r0, #40	; 0x28
 800026c:	f000 ffcd 	bl	800120a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000270:	2028      	movs	r0, #40	; 0x28
 8000272:	f000 ffe6 	bl	8001242 <HAL_NVIC_EnableIRQ>

}
 8000276:	bf00      	nop
 8000278:	3720      	adds	r7, #32
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40021000 	.word	0x40021000
 8000284:	40010800 	.word	0x40010800
 8000288:	40010c00 	.word	0x40010c00
 800028c:	10210000 	.word	0x10210000
 8000290:	10110000 	.word	0x10110000

08000294 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000298:	f000 fe7e 	bl	8000f98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800029c:	f000 f844 	bl	8000328 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002a0:	f7ff ff54 	bl	800014c <MX_GPIO_Init>
	MX_TIM2_Init();
 80002a4:	f000 fc70 	bl	8000b88 <MX_TIM2_Init>
	MX_TIM1_Init();
 80002a8:	f000 fbce 	bl	8000a48 <MX_TIM1_Init>
	MX_TIM3_Init();
 80002ac:	f000 fcb8 	bl	8000c20 <MX_TIM3_Init>
	MX_USART3_UART_Init();
 80002b0:	f000 fdce 	bl	8000e50 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	// ==========================================================
	// ==========================================================
	// Inicio del LCD
	LCD_Init();
 80002b4:	f003 febc 	bl	8004030 <LCD_Init>
	LCD_Clear();
 80002b8:	f003 fe74 	bl	8003fa4 <LCD_Clear>
	LCD_msg("Cajas procesadas", 1, 0);
 80002bc:	2200      	movs	r2, #0
 80002be:	2101      	movs	r1, #1
 80002c0:	4810      	ldr	r0, [pc, #64]	; (8000304 <main+0x70>)
 80002c2:	f003 fdc3 	bl	8003e4c <LCD_msg>
	// Para evitar el salto a PeriodElapsedCallback al iniciar los temporizadores con IT
//	TIM1->SR &= ~TIM_SR_UIF_Msk;

	// ==========================================================
	// Variables de estado iniciales
	estado_sistema = detenido;
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <main+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	701a      	strb	r2, [r3, #0]
	cola_de_cajas = cola_vacia;
 80002cc:	4b0f      	ldr	r3, [pc, #60]	; (800030c <main+0x78>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	701a      	strb	r2, [r3, #0]
	motor_1 = parado;
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <main+0x7c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
	motor_2 = sin_desviar;
 80002d8:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <main+0x80>)
 80002da:	f640 2241 	movw	r2, #2625	; 0xa41
 80002de:	801a      	strh	r2, [r3, #0]
	seleccion_usuario = none;
 80002e0:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <main+0x84>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	801a      	strh	r2, [r3, #0]

	// Estado de la compuerta (motor_2 inicialmente sin desviar)
	TIM3->CCR1 = motor_2;
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <main+0x80>)
 80002e8:	881a      	ldrh	r2, [r3, #0]
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <main+0x88>)
 80002ec:	635a      	str	r2, [r3, #52]	; 0x34
	// Podria venir por flash

	// ==========================================================
	// Lanzamos el menu por UART
	menu_seleccion(0, 0);
 80002ee:	2100      	movs	r1, #0
 80002f0:	2000      	movs	r0, #0
 80002f2:	f004 f80b 	bl	800430c <menu_seleccion>
	// Activamos las interrupciones para recibir por UART
	HAL_UART_Receive_IT(&huart3, &RX_char, 1);
 80002f6:	2201      	movs	r2, #1
 80002f8:	4909      	ldr	r1, [pc, #36]	; (8000320 <main+0x8c>)
 80002fa:	480a      	ldr	r0, [pc, #40]	; (8000324 <main+0x90>)
 80002fc:	f002 ff4e 	bl	800319c <HAL_UART_Receive_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000300:	e7fe      	b.n	8000300 <main+0x6c>
 8000302:	bf00      	nop
 8000304:	080046b8 	.word	0x080046b8
 8000308:	200004e0 	.word	0x200004e0
 800030c:	200004e4 	.word	0x200004e4
 8000310:	200004e1 	.word	0x200004e1
 8000314:	200004e2 	.word	0x200004e2
 8000318:	200004e6 	.word	0x200004e6
 800031c:	40000400 	.word	0x40000400
 8000320:	200004d4 	.word	0x200004d4
 8000324:	200005c0 	.word	0x200005c0

08000328 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b090      	sub	sp, #64	; 0x40
 800032c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	2228      	movs	r2, #40	; 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f004 f9aa 	bl	8004690 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034a:	2301      	movs	r3, #1
 800034c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000352:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000358:	2301      	movs	r3, #1
 800035a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035c:	2302      	movs	r3, #2
 800035e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000364:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000366:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800036a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800036c:	f107 0318 	add.w	r3, r7, #24
 8000370:	4618      	mov	r0, r3
 8000372:	f001 f9e7 	bl	8001744 <HAL_RCC_OscConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x58>
		Error_Handler();
 800037c:	f000 fad4 	bl	8000928 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000380:	230f      	movs	r3, #15
 8000382:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000384:	2302      	movs	r3, #2
 8000386:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000390:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2102      	movs	r1, #2
 800039a:	4618      	mov	r0, r3
 800039c:	f001 fc54 	bl	8001c48 <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x82>
		Error_Handler();
 80003a6:	f000 fabf 	bl	8000928 <Error_Handler>
	}
}
 80003aa:	bf00      	nop
 80003ac:	3740      	adds	r7, #64	; 0x40
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */

// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
// &&&&&&&&&&&&&&&&&& EXTI CALLBACKS &&&&&&&&&&&&&&&&&&&&&&&&&&
// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	80fb      	strh	r3, [r7, #6]

	// ==========================================================
	// SENSOR 1
	// Se detecta una caja, pero se tiene en cuenta que quizas se este procesando
	// una caja en ese momento
	if (GPIO_Pin == sensor_1_Pin) {
 80003be:	88fb      	ldrh	r3, [r7, #6]
 80003c0:	2b80      	cmp	r3, #128	; 0x80
 80003c2:	d12d      	bne.n	8000420 <HAL_GPIO_EXTI_Callback+0x6c>

		// Se detecto una caja, entonces se inicia el proceso de desviacion
		if (estado_sistema == pendiente) {
 80003c4:	4b41      	ldr	r3, [pc, #260]	; (80004cc <HAL_GPIO_EXTI_Callback+0x118>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d111      	bne.n	80003f0 <HAL_GPIO_EXTI_Callback+0x3c>
			estado_sistema = en_proceso;
 80003cc:	4b3f      	ldr	r3, [pc, #252]	; (80004cc <HAL_GPIO_EXTI_Callback+0x118>)
 80003ce:	2202      	movs	r2, #2
 80003d0:	701a      	strb	r2, [r3, #0]

			// Se inicia el contador de pulsos
			pulsos_proceso = 0;
 80003d2:	4b3f      	ldr	r3, [pc, #252]	; (80004d0 <HAL_GPIO_EXTI_Callback+0x11c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	801a      	strh	r2, [r3, #0]

			// Se indica con el led de proceso
			HAL_GPIO_WritePin(led_proceso_GPIO_Port, led_proceso_Pin, 1);
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003de:	483d      	ldr	r0, [pc, #244]	; (80004d4 <HAL_GPIO_EXTI_Callback+0x120>)
 80003e0:	f001 f980 	bl	80016e4 <HAL_GPIO_WritePin>

			// Se transmite por UART
			HAL_UART_Transmit(&huart3, MSG_cajaD, sizeof(MSG_cajaD), 100);
 80003e4:	2364      	movs	r3, #100	; 0x64
 80003e6:	223f      	movs	r2, #63	; 0x3f
 80003e8:	493b      	ldr	r1, [pc, #236]	; (80004d8 <HAL_GPIO_EXTI_Callback+0x124>)
 80003ea:	483c      	ldr	r0, [pc, #240]	; (80004dc <HAL_GPIO_EXTI_Callback+0x128>)
 80003ec:	f002 fe53 	bl	8003096 <HAL_UART_Transmit>

		}

		// En el caso de que una caja se este procesando, entonces se coloca
		// una caja en cola
		if (estado_sistema == en_proceso && motor_2 == desviando
 80003f0:	4b36      	ldr	r3, [pc, #216]	; (80004cc <HAL_GPIO_EXTI_Callback+0x118>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b02      	cmp	r3, #2
 80003f6:	d113      	bne.n	8000420 <HAL_GPIO_EXTI_Callback+0x6c>
 80003f8:	4b39      	ldr	r3, [pc, #228]	; (80004e0 <HAL_GPIO_EXTI_Callback+0x12c>)
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	f241 02fe 	movw	r2, #4350	; 0x10fe
 8000400:	4293      	cmp	r3, r2
 8000402:	d10d      	bne.n	8000420 <HAL_GPIO_EXTI_Callback+0x6c>
				&& pulsos_proceso > (int) PULSOS_XM / 10) {
 8000404:	f240 423e 	movw	r2, #1086	; 0x43e
 8000408:	4b36      	ldr	r3, [pc, #216]	; (80004e4 <HAL_GPIO_EXTI_Callback+0x130>)
 800040a:	fba3 2302 	umull	r2, r3, r3, r2
 800040e:	08db      	lsrs	r3, r3, #3
 8000410:	b29a      	uxth	r2, r3
 8000412:	4b2f      	ldr	r3, [pc, #188]	; (80004d0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000414:	881b      	ldrh	r3, [r3, #0]
 8000416:	429a      	cmp	r2, r3
 8000418:	d202      	bcs.n	8000420 <HAL_GPIO_EXTI_Callback+0x6c>
			cola_de_cajas = caja_en_cola;
 800041a:	4b33      	ldr	r3, [pc, #204]	; (80004e8 <HAL_GPIO_EXTI_Callback+0x134>)
 800041c:	2201      	movs	r2, #1
 800041e:	701a      	strb	r2, [r3, #0]
	}

	// ==========================================================
	// SENSOR 2
	// La caja fue derivada/procesada correctamente
	if (GPIO_Pin == sensor_2_Pin && estado_sistema == en_proceso
 8000420:	88fb      	ldrh	r3, [r7, #6]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d12d      	bne.n	8000482 <HAL_GPIO_EXTI_Callback+0xce>
 8000426:	4b29      	ldr	r3, [pc, #164]	; (80004cc <HAL_GPIO_EXTI_Callback+0x118>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b02      	cmp	r3, #2
 800042c:	d129      	bne.n	8000482 <HAL_GPIO_EXTI_Callback+0xce>
			&& motor_2 == desviando) {
 800042e:	4b2c      	ldr	r3, [pc, #176]	; (80004e0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000430:	881b      	ldrh	r3, [r3, #0]
 8000432:	f241 02fe 	movw	r2, #4350	; 0x10fe
 8000436:	4293      	cmp	r3, r2
 8000438:	d123      	bne.n	8000482 <HAL_GPIO_EXTI_Callback+0xce>
		estado_sistema = caja_procesada;
 800043a:	4b24      	ldr	r3, [pc, #144]	; (80004cc <HAL_GPIO_EXTI_Callback+0x118>)
 800043c:	2203      	movs	r2, #3
 800043e:	701a      	strb	r2, [r3, #0]
		contador_cajas++;
 8000440:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <HAL_GPIO_EXTI_Callback+0x138>)
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	3301      	adds	r3, #1
 8000446:	b29a      	uxth	r2, r3
 8000448:	4b28      	ldr	r3, [pc, #160]	; (80004ec <HAL_GPIO_EXTI_Callback+0x138>)
 800044a:	801a      	strh	r2, [r3, #0]



		// Cambio del numero de cajas procesadas
		LCD_msg("", 2, 0);
 800044c:	2200      	movs	r2, #0
 800044e:	2102      	movs	r1, #2
 8000450:	4827      	ldr	r0, [pc, #156]	; (80004f0 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000452:	f003 fcfb 	bl	8003e4c <LCD_msg>
		char aux[12];
		int_to_str((int) contador_cajas, aux);
 8000456:	4b25      	ldr	r3, [pc, #148]	; (80004ec <HAL_GPIO_EXTI_Callback+0x138>)
 8000458:	881b      	ldrh	r3, [r3, #0]
 800045a:	461a      	mov	r2, r3
 800045c:	f107 030c 	add.w	r3, r7, #12
 8000460:	4619      	mov	r1, r3
 8000462:	4610      	mov	r0, r2
 8000464:	f003 fc40 	bl	8003ce8 <int_to_str>
		LCD_msg(aux, 2, 0);
 8000468:	f107 030c 	add.w	r3, r7, #12
 800046c:	2200      	movs	r2, #0
 800046e:	2102      	movs	r1, #2
 8000470:	4618      	mov	r0, r3
 8000472:	f003 fceb 	bl	8003e4c <LCD_msg>

		// Se comunica a traves de uart
		HAL_UART_Transmit(&huart3, MSG_cajaP, sizeof(MSG_cajaP), 100);
 8000476:	2364      	movs	r3, #100	; 0x64
 8000478:	2237      	movs	r2, #55	; 0x37
 800047a:	491e      	ldr	r1, [pc, #120]	; (80004f4 <HAL_GPIO_EXTI_Callback+0x140>)
 800047c:	4817      	ldr	r0, [pc, #92]	; (80004dc <HAL_GPIO_EXTI_Callback+0x128>)
 800047e:	f002 fe0a 	bl	8003096 <HAL_UART_Transmit>
	}

	// ==========================================================
	// PULSADOR DE PARADA
	// Se usa para interrumpir y detener al sistema
	if (GPIO_Pin == pulsador_parada_Pin && estado_sistema != detenido) {
 8000482:	88fb      	ldrh	r3, [r7, #6]
 8000484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000488:	d11c      	bne.n	80004c4 <HAL_GPIO_EXTI_Callback+0x110>
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <HAL_GPIO_EXTI_Callback+0x118>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d018      	beq.n	80004c4 <HAL_GPIO_EXTI_Callback+0x110>
		estado_sistema = detenido;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <HAL_GPIO_EXTI_Callback+0x118>)
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
		seleccion_usuario = none;
 8000498:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <HAL_GPIO_EXTI_Callback+0x144>)
 800049a:	2200      	movs	r2, #0
 800049c:	801a      	strh	r2, [r3, #0]

		// Detenemos motor_1 y motor_2
		HAL_TIM_Base_Stop_IT(&htim2);
 800049e:	4817      	ldr	r0, [pc, #92]	; (80004fc <HAL_GPIO_EXTI_Callback+0x148>)
 80004a0:	f001 fe02 	bl	80020a8 <HAL_TIM_Base_Stop_IT>
		stop_stepper();
 80004a4:	f004 f87e 	bl	80045a4 <stop_stepper>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80004a8:	210c      	movs	r1, #12
 80004aa:	4815      	ldr	r0, [pc, #84]	; (8000500 <HAL_GPIO_EXTI_Callback+0x14c>)
 80004ac:	f001 ff24 	bl	80022f8 <HAL_TIM_PWM_Stop>

		// Mostramos menu de inicio
		HAL_UART_Transmit(&huart3, MSG_pulsadorP, sizeof(MSG_pulsadorP), 100);
 80004b0:	2364      	movs	r3, #100	; 0x64
 80004b2:	2237      	movs	r2, #55	; 0x37
 80004b4:	4913      	ldr	r1, [pc, #76]	; (8000504 <HAL_GPIO_EXTI_Callback+0x150>)
 80004b6:	4809      	ldr	r0, [pc, #36]	; (80004dc <HAL_GPIO_EXTI_Callback+0x128>)
 80004b8:	f002 fded 	bl	8003096 <HAL_UART_Transmit>
		menu_seleccion(0, 0);
 80004bc:	2100      	movs	r1, #0
 80004be:	2000      	movs	r0, #0
 80004c0:	f003 ff24 	bl	800430c <menu_seleccion>
	}

}
 80004c4:	bf00      	nop
 80004c6:	3718      	adds	r7, #24
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	200004e0 	.word	0x200004e0
 80004d0:	200004dc 	.word	0x200004dc
 80004d4:	40010800 	.word	0x40010800
 80004d8:	20000000 	.word	0x20000000
 80004dc:	200005c0 	.word	0x200005c0
 80004e0:	200004e2 	.word	0x200004e2
 80004e4:	cccccccd 	.word	0xcccccccd
 80004e8:	200004e4 	.word	0x200004e4
 80004ec:	200004d6 	.word	0x200004d6
 80004f0:	080046cc 	.word	0x080046cc
 80004f4:	20000040 	.word	0x20000040
 80004f8:	200004e6 	.word	0x200004e6
 80004fc:	20000530 	.word	0x20000530
 8000500:	20000578 	.word	0x20000578
 8000504:	20000078 	.word	0x20000078

08000508 <HAL_TIM_PeriodElapsedCallback>:
// ---------------------------------------------------------------------------------------
// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
// &&&&&&&&&&&&&& PeriodElapsed CALLBACKS &&&&&&&&&&&&&&&&&&&&&&&&&&
// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	// ==========================================================
	// Movimiento de motor_1
	if (htim == &htim2) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a53      	ldr	r2, [pc, #332]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000514:	4293      	cmp	r3, r2
 8000516:	f040 80a0 	bne.w	800065a <HAL_TIM_PeriodElapsedCallback+0x152>

		init_stepper(pulso_stepper, (int) 1);
 800051a:	4b52      	ldr	r3, [pc, #328]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2101      	movs	r1, #1
 8000520:	4618      	mov	r0, r3
 8000522:	f003 ffd5 	bl	80044d0 <init_stepper>

		// El pulso del stepper toma valores entre 0 y 3
		pulso_stepper++;
 8000526:	4b4f      	ldr	r3, [pc, #316]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	3301      	adds	r3, #1
 800052c:	4a4d      	ldr	r2, [pc, #308]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800052e:	6013      	str	r3, [r2, #0]
		if (pulso_stepper >= 4) {
 8000530:	4b4c      	ldr	r3, [pc, #304]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b03      	cmp	r3, #3
 8000536:	dd02      	ble.n	800053e <HAL_TIM_PeriodElapsedCallback+0x36>
			pulso_stepper = 0;
 8000538:	4b4a      	ldr	r3, [pc, #296]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
		}

		if (estado_sistema == en_proceso || estado_sistema == caja_procesada
 800053e:	4b4a      	ldr	r3, [pc, #296]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b02      	cmp	r3, #2
 8000544:	d008      	beq.n	8000558 <HAL_TIM_PeriodElapsedCallback+0x50>
 8000546:	4b48      	ldr	r3, [pc, #288]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b03      	cmp	r3, #3
 800054c:	d004      	beq.n	8000558 <HAL_TIM_PeriodElapsedCallback+0x50>
				|| cola_de_cajas == caja_en_cola) {
 800054e:	4b47      	ldr	r3, [pc, #284]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b01      	cmp	r3, #1
 8000554:	f040 8081 	bne.w	800065a <HAL_TIM_PeriodElapsedCallback+0x152>

			pulsos_proceso++;
 8000558:	4b45      	ldr	r3, [pc, #276]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800055a:	881b      	ldrh	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	b29a      	uxth	r2, r3
 8000560:	4b43      	ldr	r3, [pc, #268]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000562:	801a      	strh	r2, [r3, #0]
			// Segundo contador de pulsos para la caja en cola
			if (cola_de_cajas == caja_en_cola) {
 8000564:	4b41      	ldr	r3, [pc, #260]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d105      	bne.n	8000578 <HAL_TIM_PeriodElapsedCallback+0x70>
				pulsos_caja_cola++;
 800056c:	4b41      	ldr	r3, [pc, #260]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	3301      	adds	r3, #1
 8000572:	b29a      	uxth	r2, r3
 8000574:	4b3f      	ldr	r3, [pc, #252]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000576:	801a      	strh	r2, [r3, #0]
			}

			// Movimiento de motor_2 a la mitad del trayecto
			if ((pulsos_proceso >= (uint16_t) ((PULSOS_XM * D_SENSORES) / 2))
 8000578:	f240 433e 	movw	r3, #1086	; 0x43e
 800057c:	2202      	movs	r2, #2
 800057e:	fb02 f303 	mul.w	r3, r2, r3
 8000582:	0fda      	lsrs	r2, r3, #31
 8000584:	4413      	add	r3, r2
 8000586:	105b      	asrs	r3, r3, #1
 8000588:	b29a      	uxth	r2, r3
 800058a:	4b39      	ldr	r3, [pc, #228]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	429a      	cmp	r2, r3
 8000590:	d80b      	bhi.n	80005aa <HAL_TIM_PeriodElapsedCallback+0xa2>
					&& estado_sistema == en_proceso) {
 8000592:	4b35      	ldr	r3, [pc, #212]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b02      	cmp	r3, #2
 8000598:	d107      	bne.n	80005aa <HAL_TIM_PeriodElapsedCallback+0xa2>

				motor_2 = desviando;
 800059a:	4b37      	ldr	r3, [pc, #220]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800059c:	f241 02fe 	movw	r2, #4350	; 0x10fe
 80005a0:	801a      	strh	r2, [r3, #0]
				TIM3->CCR4 = motor_2;
 80005a2:	4b35      	ldr	r3, [pc, #212]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80005a4:	881a      	ldrh	r2, [r3, #0]
 80005a6:	4b35      	ldr	r3, [pc, #212]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80005a8:	641a      	str	r2, [r3, #64]	; 0x40
			}

			// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			// La caja deberia haber alcanzado el segundo sensor
			if (pulsos_proceso >= (PULSOS_XM * D_SENSORES)) {
 80005aa:	4b31      	ldr	r3, [pc, #196]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	461a      	mov	r2, r3
 80005b0:	f240 433e 	movw	r3, #1086	; 0x43e
 80005b4:	2102      	movs	r1, #2
 80005b6:	fb01 f303 	mul.w	r3, r1, r3
 80005ba:	429a      	cmp	r2, r3
 80005bc:	db4d      	blt.n	800065a <HAL_TIM_PeriodElapsedCallback+0x152>

				// En caso de no haber detectado la segunda caja
				//  -> Se enciende el led de alerta
				//	-> Se para motor_1
				// 	-> Se avisa por sistema
				if (estado_sistema != caja_procesada) {
 80005be:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	d026      	beq.n	8000614 <HAL_TIM_PeriodElapsedCallback+0x10c>
					estado_sistema = detenido;
 80005c6:	4b28      	ldr	r3, [pc, #160]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
					seleccion_usuario = none;
 80005cc:	4b2c      	ldr	r3, [pc, #176]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	801a      	strh	r2, [r3, #0]

					// Se posiciona nuevamente y motor_2
					motor_2 = desviando;
 80005d2:	4b29      	ldr	r3, [pc, #164]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80005d4:	f241 02fe 	movw	r2, #4350	; 0x10fe
 80005d8:	801a      	strh	r2, [r3, #0]
					TIM2->CCR4 = motor_2;
 80005da:	4b27      	ldr	r3, [pc, #156]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80005dc:	881a      	ldrh	r2, [r3, #0]
 80005de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005e2:	641a      	str	r2, [r3, #64]	; 0x40

					// Se detiene motor_1 y motor_2
					HAL_TIM_Base_Stop_IT(&htim2);
 80005e4:	481e      	ldr	r0, [pc, #120]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80005e6:	f001 fd5f 	bl	80020a8 <HAL_TIM_Base_Stop_IT>
					stop_stepper();
 80005ea:	f003 ffdb 	bl	80045a4 <stop_stepper>
					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80005ee:	210c      	movs	r1, #12
 80005f0:	4824      	ldr	r0, [pc, #144]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80005f2:	f001 fe81 	bl	80022f8 <HAL_TIM_PWM_Stop>

					// Se enciende el led de alerta y apaga el de proceso
					HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80005f6:	210c      	movs	r1, #12
 80005f8:	4823      	ldr	r0, [pc, #140]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80005fa:	f001 fddb 	bl	80021b4 <HAL_TIM_PWM_Start>
					HAL_GPIO_WritePin(led_proceso_GPIO_Port, led_proceso_Pin,
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000604:	4821      	ldr	r0, [pc, #132]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000606:	f001 f86d 	bl	80016e4 <HAL_GPIO_WritePin>
							0);

					// Se reinicia el menu por UART
					menu_seleccion(4, 0);
 800060a:	2100      	movs	r1, #0
 800060c:	2004      	movs	r0, #4
 800060e:	f003 fe7d 	bl	800430c <menu_seleccion>
					return;
 8000612:	e022      	b.n	800065a <HAL_TIM_PeriodElapsedCallback+0x152>
				}

				// Si habia una caja en cola, entonces movemos la cantidad de pulsos
				// contados de la caja en cola al proceso general
				if (cola_de_cajas == caja_en_cola) {
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d10d      	bne.n	8000638 <HAL_TIM_PeriodElapsedCallback+0x130>
					cola_de_cajas = cola_vacia;
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
					estado_sistema = en_proceso;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000624:	2202      	movs	r2, #2
 8000626:	701a      	strb	r2, [r3, #0]

					pulsos_proceso = pulsos_caja_cola;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800062a:	881a      	ldrh	r2, [r3, #0]
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800062e:	801a      	strh	r2, [r3, #0]
					pulsos_caja_cola = 0;
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000632:	2200      	movs	r2, #0
 8000634:	801a      	strh	r2, [r3, #0]
					return;
 8000636:	e010      	b.n	800065a <HAL_TIM_PeriodElapsedCallback+0x152>
				}

				// Finalmente si era una sola caja y fue procesada,
				// se coloca la barrera nuevamente a sin_desviar
				motor_2 = sin_desviar;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800063a:	f640 2241 	movw	r2, #2625	; 0xa41
 800063e:	801a      	strh	r2, [r3, #0]
				TIM3->CCR4 = motor_2;
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000642:	881a      	ldrh	r2, [r3, #0]
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000646:	641a      	str	r2, [r3, #64]	; 0x40

				// Se apaga el led de proceso
				HAL_GPIO_WritePin(led_proceso_GPIO_Port, led_proceso_Pin, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064e:	480f      	ldr	r0, [pc, #60]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000650:	f001 f848 	bl	80016e4 <HAL_GPIO_WritePin>

				// Y se cambia al estado pendiente
				estado_sistema = pendiente;
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000656:	2201      	movs	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]
			}
		}

	}

}
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000530 	.word	0x20000530
 8000664:	200004d8 	.word	0x200004d8
 8000668:	200004e0 	.word	0x200004e0
 800066c:	200004e4 	.word	0x200004e4
 8000670:	200004dc 	.word	0x200004dc
 8000674:	200004de 	.word	0x200004de
 8000678:	200004e2 	.word	0x200004e2
 800067c:	40000400 	.word	0x40000400
 8000680:	200004e6 	.word	0x200004e6
 8000684:	20000578 	.word	0x20000578
 8000688:	200004e8 	.word	0x200004e8
 800068c:	40010800 	.word	0x40010800

08000690 <HAL_UART_RxCpltCallback>:
// ---------------------------------------------------------------------------------------

// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
// &&&&&&&&&&&&&&&&&& UART CALLBACK &&&&&&&&&&&&&&&&&&&&&&&&&&
// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

	// ==========================================================
	// El sistema esta detenido, las opciones que se manejan son
	// 1. Iniciar
	// 2. Cambiar posicion de barrera
	if (seleccion_usuario == none && estado_sistema == detenido) {
 8000698:	4b97      	ldr	r3, [pc, #604]	; (80008f8 <HAL_UART_RxCpltCallback+0x268>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d134      	bne.n	800070a <HAL_UART_RxCpltCallback+0x7a>
 80006a0:	4b96      	ldr	r3, [pc, #600]	; (80008fc <HAL_UART_RxCpltCallback+0x26c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d130      	bne.n	800070a <HAL_UART_RxCpltCallback+0x7a>

		// Si esta encendido el led de alerta lo apagamos
		if (htim1.ChannelState[3] == HAL_TIM_CHANNEL_STATE_BUSY) {
 80006a8:	4b95      	ldr	r3, [pc, #596]	; (8000900 <HAL_UART_RxCpltCallback+0x270>)
 80006aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d103      	bne.n	80006bc <HAL_UART_RxCpltCallback+0x2c>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 80006b4:	210c      	movs	r1, #12
 80006b6:	4892      	ldr	r0, [pc, #584]	; (8000900 <HAL_UART_RxCpltCallback+0x270>)
 80006b8:	f001 fe1e 	bl	80022f8 <HAL_TIM_PWM_Stop>
		}

		if (RX_char == '1') {
 80006bc:	4b91      	ldr	r3, [pc, #580]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b31      	cmp	r3, #49	; 0x31
 80006c2:	d107      	bne.n	80006d4 <HAL_UART_RxCpltCallback+0x44>
			seleccion_usuario = por_iniciar;
 80006c4:	4b8c      	ldr	r3, [pc, #560]	; (80008f8 <HAL_UART_RxCpltCallback+0x268>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	801a      	strh	r2, [r3, #0]
			menu_seleccion(1, 0);
 80006ca:	2100      	movs	r1, #0
 80006cc:	2001      	movs	r0, #1
 80006ce:	f003 fe1d 	bl	800430c <menu_seleccion>
 80006d2:	e011      	b.n	80006f8 <HAL_UART_RxCpltCallback+0x68>
		} else if (RX_char == '2') {
 80006d4:	4b8b      	ldr	r3, [pc, #556]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b32      	cmp	r3, #50	; 0x32
 80006da:	d107      	bne.n	80006ec <HAL_UART_RxCpltCallback+0x5c>
			seleccion_usuario = mover_barrera;
 80006dc:	4b86      	ldr	r3, [pc, #536]	; (80008f8 <HAL_UART_RxCpltCallback+0x268>)
 80006de:	2202      	movs	r2, #2
 80006e0:	801a      	strh	r2, [r3, #0]
			menu_seleccion(2, 0);
 80006e2:	2100      	movs	r1, #0
 80006e4:	2002      	movs	r0, #2
 80006e6:	f003 fe11 	bl	800430c <menu_seleccion>
 80006ea:	e005      	b.n	80006f8 <HAL_UART_RxCpltCallback+0x68>
		} else {
			HAL_UART_Transmit(&huart3, MSG_opcIncorrecta,
 80006ec:	2364      	movs	r3, #100	; 0x64
 80006ee:	2216      	movs	r2, #22
 80006f0:	4985      	ldr	r1, [pc, #532]	; (8000908 <HAL_UART_RxCpltCallback+0x278>)
 80006f2:	4886      	ldr	r0, [pc, #536]	; (800090c <HAL_UART_RxCpltCallback+0x27c>)
 80006f4:	f002 fccf 	bl	8003096 <HAL_UART_Transmit>
					sizeof(MSG_opcIncorrecta), 100);
		}

		RX_char = 0x00;
 80006f8:	4b82      	ldr	r3, [pc, #520]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &RX_char, 1);
 80006fe:	2201      	movs	r2, #1
 8000700:	4980      	ldr	r1, [pc, #512]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 8000702:	4882      	ldr	r0, [pc, #520]	; (800090c <HAL_UART_RxCpltCallback+0x27c>)
 8000704:	f002 fd4a 	bl	800319c <HAL_UART_Receive_IT>
		return;
 8000708:	e0f3      	b.n	80008f2 <HAL_UART_RxCpltCallback+0x262>
	}

	// ==========================================================
	// El usuario va a seleccionar una velocidad de inicio / Se inicia el sistema
	if (seleccion_usuario == por_iniciar) {
 800070a:	4b7b      	ldr	r3, [pc, #492]	; (80008f8 <HAL_UART_RxCpltCallback+0x268>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d152      	bne.n	80007b8 <HAL_UART_RxCpltCallback+0x128>
		if (RX_char == '1') {
 8000712:	4b7c      	ldr	r3, [pc, #496]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b31      	cmp	r3, #49	; 0x31
 8000718:	d106      	bne.n	8000728 <HAL_UART_RxCpltCallback+0x98>
			seleccion_usuario = baja;
 800071a:	4b77      	ldr	r3, [pc, #476]	; (80008f8 <HAL_UART_RxCpltCallback+0x268>)
 800071c:	2264      	movs	r2, #100	; 0x64
 800071e:	801a      	strh	r2, [r3, #0]
			motor_1 = v_baja;
 8000720:	4b7b      	ldr	r3, [pc, #492]	; (8000910 <HAL_UART_RxCpltCallback+0x280>)
 8000722:	22f0      	movs	r2, #240	; 0xf0
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	e025      	b.n	8000774 <HAL_UART_RxCpltCallback+0xe4>
		} else if (RX_char == '2') {
 8000728:	4b76      	ldr	r3, [pc, #472]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b32      	cmp	r3, #50	; 0x32
 800072e:	d106      	bne.n	800073e <HAL_UART_RxCpltCallback+0xae>
			seleccion_usuario = media;
 8000730:	4b71      	ldr	r3, [pc, #452]	; (80008f8 <HAL_UART_RxCpltCallback+0x268>)
 8000732:	22c8      	movs	r2, #200	; 0xc8
 8000734:	801a      	strh	r2, [r3, #0]
			motor_1 = v_media;
 8000736:	4b76      	ldr	r3, [pc, #472]	; (8000910 <HAL_UART_RxCpltCallback+0x280>)
 8000738:	2278      	movs	r2, #120	; 0x78
 800073a:	701a      	strb	r2, [r3, #0]
 800073c:	e01a      	b.n	8000774 <HAL_UART_RxCpltCallback+0xe4>
		} else if (RX_char == '3') {
 800073e:	4b71      	ldr	r3, [pc, #452]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b33      	cmp	r3, #51	; 0x33
 8000744:	d107      	bne.n	8000756 <HAL_UART_RxCpltCallback+0xc6>
			seleccion_usuario = alta;
 8000746:	4b6c      	ldr	r3, [pc, #432]	; (80008f8 <HAL_UART_RxCpltCallback+0x268>)
 8000748:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800074c:	801a      	strh	r2, [r3, #0]
			motor_1 = v_alta;
 800074e:	4b70      	ldr	r3, [pc, #448]	; (8000910 <HAL_UART_RxCpltCallback+0x280>)
 8000750:	2250      	movs	r2, #80	; 0x50
 8000752:	701a      	strb	r2, [r3, #0]
 8000754:	e00e      	b.n	8000774 <HAL_UART_RxCpltCallback+0xe4>
		} else {
			HAL_UART_Transmit(&huart3, MSG_opcIncorrecta,
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	2216      	movs	r2, #22
 800075a:	496b      	ldr	r1, [pc, #428]	; (8000908 <HAL_UART_RxCpltCallback+0x278>)
 800075c:	486b      	ldr	r0, [pc, #428]	; (800090c <HAL_UART_RxCpltCallback+0x27c>)
 800075e:	f002 fc9a 	bl	8003096 <HAL_UART_Transmit>
					sizeof(MSG_opcIncorrecta), 100);

			RX_char = 0x00;
 8000762:	4b68      	ldr	r3, [pc, #416]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, &RX_char, 1);
 8000768:	2201      	movs	r2, #1
 800076a:	4966      	ldr	r1, [pc, #408]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 800076c:	4867      	ldr	r0, [pc, #412]	; (800090c <HAL_UART_RxCpltCallback+0x27c>)
 800076e:	f002 fd15 	bl	800319c <HAL_UART_Receive_IT>
			return;
 8000772:	e0be      	b.n	80008f2 <HAL_UART_RxCpltCallback+0x262>
		}

		// Menu -> sistema en marcha
		menu_seleccion(3, 0);
 8000774:	2100      	movs	r1, #0
 8000776:	2003      	movs	r0, #3
 8000778:	f003 fdc8 	bl	800430c <menu_seleccion>
		// Set de estados
		estado_sistema = pendiente;
 800077c:	4b5f      	ldr	r3, [pc, #380]	; (80008fc <HAL_UART_RxCpltCallback+0x26c>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]

		// Iniciamos motor_1 y motor_2
		TIM2->ARR = motor_1;
 8000782:	4b63      	ldr	r3, [pc, #396]	; (8000910 <HAL_UART_RxCpltCallback+0x280>)
 8000784:	781a      	ldrb	r2, [r3, #0]
 8000786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800078a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (htim2.State != HAL_TIM_STATE_BUSY)
 800078c:	4b61      	ldr	r3, [pc, #388]	; (8000914 <HAL_UART_RxCpltCallback+0x284>)
 800078e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b02      	cmp	r3, #2
 8000796:	d002      	beq.n	800079e <HAL_UART_RxCpltCallback+0x10e>
			HAL_TIM_Base_Start_IT(&htim2);
 8000798:	485e      	ldr	r0, [pc, #376]	; (8000914 <HAL_UART_RxCpltCallback+0x284>)
 800079a:	f001 fc33 	bl	8002004 <HAL_TIM_Base_Start_IT>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800079e:	210c      	movs	r1, #12
 80007a0:	485d      	ldr	r0, [pc, #372]	; (8000918 <HAL_UART_RxCpltCallback+0x288>)
 80007a2:	f001 fd07 	bl	80021b4 <HAL_TIM_PWM_Start>

		RX_char = 0x00;
 80007a6:	4b57      	ldr	r3, [pc, #348]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &RX_char, 1);
 80007ac:	2201      	movs	r2, #1
 80007ae:	4955      	ldr	r1, [pc, #340]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 80007b0:	4856      	ldr	r0, [pc, #344]	; (800090c <HAL_UART_RxCpltCallback+0x27c>)
 80007b2:	f002 fcf3 	bl	800319c <HAL_UART_Receive_IT>
		return;
 80007b6:	e09c      	b.n	80008f2 <HAL_UART_RxCpltCallback+0x262>
	// ==========================================================
	// Con el sistema en marcha solo se pueden hacer dos cosas, siempre
	// y cuando el sistema se encuentre en estado de pendiente
	// 0. Detener el sistema
	// 1. Cambiar velocidad
	if (estado_sistema == pendiente) {
 80007b8:	4b50      	ldr	r3, [pc, #320]	; (80008fc <HAL_UART_RxCpltCallback+0x26c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d137      	bne.n	8000830 <HAL_UART_RxCpltCallback+0x1a0>

		if (RX_char == '0') {
 80007c0:	4b50      	ldr	r3, [pc, #320]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b30      	cmp	r3, #48	; 0x30
 80007c6:	d116      	bne.n	80007f6 <HAL_UART_RxCpltCallback+0x166>
			estado_sistema = detenido;
 80007c8:	4b4c      	ldr	r3, [pc, #304]	; (80008fc <HAL_UART_RxCpltCallback+0x26c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
			motor_1 = parado;
 80007ce:	4b50      	ldr	r3, [pc, #320]	; (8000910 <HAL_UART_RxCpltCallback+0x280>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
			seleccion_usuario = none;
 80007d4:	4b48      	ldr	r3, [pc, #288]	; (80008f8 <HAL_UART_RxCpltCallback+0x268>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	801a      	strh	r2, [r3, #0]

			// Paramos a motor_1 y motor_2
			HAL_TIM_Base_Stop_IT(&htim2);
 80007da:	484e      	ldr	r0, [pc, #312]	; (8000914 <HAL_UART_RxCpltCallback+0x284>)
 80007dc:	f001 fc64 	bl	80020a8 <HAL_TIM_Base_Stop_IT>
			stop_stepper();
 80007e0:	f003 fee0 	bl	80045a4 <stop_stepper>
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80007e4:	210c      	movs	r1, #12
 80007e6:	484c      	ldr	r0, [pc, #304]	; (8000918 <HAL_UART_RxCpltCallback+0x288>)
 80007e8:	f001 fd86 	bl	80022f8 <HAL_TIM_PWM_Stop>

			// Mostramos menu de inicio
			menu_seleccion(0, 0);
 80007ec:	2100      	movs	r1, #0
 80007ee:	2000      	movs	r0, #0
 80007f0:	f003 fd8c 	bl	800430c <menu_seleccion>
 80007f4:	e013      	b.n	800081e <HAL_UART_RxCpltCallback+0x18e>

		} else if (RX_char == '1') {
 80007f6:	4b43      	ldr	r3, [pc, #268]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b31      	cmp	r3, #49	; 0x31
 80007fc:	d109      	bne.n	8000812 <HAL_UART_RxCpltCallback+0x182>
			seleccion_usuario = por_iniciar;
 80007fe:	4b3e      	ldr	r3, [pc, #248]	; (80008f8 <HAL_UART_RxCpltCallback+0x268>)
 8000800:	2201      	movs	r2, #1
 8000802:	801a      	strh	r2, [r3, #0]
			menu_seleccion(1, (int) seleccion_usuario);
 8000804:	4b3c      	ldr	r3, [pc, #240]	; (80008f8 <HAL_UART_RxCpltCallback+0x268>)
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	2001      	movs	r0, #1
 800080c:	f003 fd7e 	bl	800430c <menu_seleccion>
 8000810:	e005      	b.n	800081e <HAL_UART_RxCpltCallback+0x18e>

		} else {
			HAL_UART_Transmit(&huart3, MSG_opcIncorrecta,
 8000812:	2364      	movs	r3, #100	; 0x64
 8000814:	2216      	movs	r2, #22
 8000816:	493c      	ldr	r1, [pc, #240]	; (8000908 <HAL_UART_RxCpltCallback+0x278>)
 8000818:	483c      	ldr	r0, [pc, #240]	; (800090c <HAL_UART_RxCpltCallback+0x27c>)
 800081a:	f002 fc3c 	bl	8003096 <HAL_UART_Transmit>
					sizeof(MSG_opcIncorrecta), 100);
		}

		RX_char = 0x00;
 800081e:	4b39      	ldr	r3, [pc, #228]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &RX_char, 1);
 8000824:	2201      	movs	r2, #1
 8000826:	4937      	ldr	r1, [pc, #220]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 8000828:	4838      	ldr	r0, [pc, #224]	; (800090c <HAL_UART_RxCpltCallback+0x27c>)
 800082a:	f002 fcb7 	bl	800319c <HAL_UART_Receive_IT>
		return;
 800082e:	e060      	b.n	80008f2 <HAL_UART_RxCpltCallback+0x262>

	} else if (estado_sistema != pendiente && estado_sistema != detenido) {
 8000830:	4b32      	ldr	r3, [pc, #200]	; (80008fc <HAL_UART_RxCpltCallback+0x26c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d012      	beq.n	800085e <HAL_UART_RxCpltCallback+0x1ce>
 8000838:	4b30      	ldr	r3, [pc, #192]	; (80008fc <HAL_UART_RxCpltCallback+0x26c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d00e      	beq.n	800085e <HAL_UART_RxCpltCallback+0x1ce>
		// El sistema esta en marcha pero procesando una caja, entonces
		// hay que esperar a que el proceso termine
		HAL_UART_Transmit(&huart3, MSG_sisMarcha, sizeof(MSG_sisMarcha), 100);
 8000840:	2364      	movs	r3, #100	; 0x64
 8000842:	2246      	movs	r2, #70	; 0x46
 8000844:	4935      	ldr	r1, [pc, #212]	; (800091c <HAL_UART_RxCpltCallback+0x28c>)
 8000846:	4831      	ldr	r0, [pc, #196]	; (800090c <HAL_UART_RxCpltCallback+0x27c>)
 8000848:	f002 fc25 	bl	8003096 <HAL_UART_Transmit>

		RX_char = 0x00;
 800084c:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &RX_char, 1);
 8000852:	2201      	movs	r2, #1
 8000854:	492b      	ldr	r1, [pc, #172]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 8000856:	482d      	ldr	r0, [pc, #180]	; (800090c <HAL_UART_RxCpltCallback+0x27c>)
 8000858:	f002 fca0 	bl	800319c <HAL_UART_Receive_IT>
		return;
 800085c:	e049      	b.n	80008f2 <HAL_UART_RxCpltCallback+0x262>
	// ==========================================================
	// Con el sistema detenido, el usuario puede decidir la posicion inicial
	// de la barrera
	// 1. Desviando
	// 2. Sin desviar
	if (seleccion_usuario == mover_barrera && estado_sistema == detenido) {
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <HAL_UART_RxCpltCallback+0x268>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	2b02      	cmp	r3, #2
 8000864:	d13c      	bne.n	80008e0 <HAL_UART_RxCpltCallback+0x250>
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <HAL_UART_RxCpltCallback+0x26c>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d138      	bne.n	80008e0 <HAL_UART_RxCpltCallback+0x250>

		if (RX_char == '1') {
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b31      	cmp	r3, #49	; 0x31
 8000874:	d104      	bne.n	8000880 <HAL_UART_RxCpltCallback+0x1f0>
			motor_2 = desviando;
 8000876:	4b2a      	ldr	r3, [pc, #168]	; (8000920 <HAL_UART_RxCpltCallback+0x290>)
 8000878:	f241 02fe 	movw	r2, #4350	; 0x10fe
 800087c:	801a      	strh	r2, [r3, #0]
 800087e:	e017      	b.n	80008b0 <HAL_UART_RxCpltCallback+0x220>
		} else if (RX_char == '2') {
 8000880:	4b20      	ldr	r3, [pc, #128]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b32      	cmp	r3, #50	; 0x32
 8000886:	d104      	bne.n	8000892 <HAL_UART_RxCpltCallback+0x202>
			motor_2 = sin_desviar;
 8000888:	4b25      	ldr	r3, [pc, #148]	; (8000920 <HAL_UART_RxCpltCallback+0x290>)
 800088a:	f640 2241 	movw	r2, #2625	; 0xa41
 800088e:	801a      	strh	r2, [r3, #0]
 8000890:	e00e      	b.n	80008b0 <HAL_UART_RxCpltCallback+0x220>
		} else {
			HAL_UART_Transmit(&huart3, MSG_opcIncorrecta,
 8000892:	2364      	movs	r3, #100	; 0x64
 8000894:	2216      	movs	r2, #22
 8000896:	491c      	ldr	r1, [pc, #112]	; (8000908 <HAL_UART_RxCpltCallback+0x278>)
 8000898:	481c      	ldr	r0, [pc, #112]	; (800090c <HAL_UART_RxCpltCallback+0x27c>)
 800089a:	f002 fbfc 	bl	8003096 <HAL_UART_Transmit>
					sizeof(MSG_opcIncorrecta), 100);

			RX_char = 0x00;
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart3, &RX_char, 1);
 80008a4:	2201      	movs	r2, #1
 80008a6:	4917      	ldr	r1, [pc, #92]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 80008a8:	4818      	ldr	r0, [pc, #96]	; (800090c <HAL_UART_RxCpltCallback+0x27c>)
 80008aa:	f002 fc77 	bl	800319c <HAL_UART_Receive_IT>
			return;
 80008ae:	e020      	b.n	80008f2 <HAL_UART_RxCpltCallback+0x262>
		}

		// Posicionamos la barrera
		TIM3->CCR4 = motor_2;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <HAL_UART_RxCpltCallback+0x290>)
 80008b2:	881a      	ldrh	r2, [r3, #0]
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <HAL_UART_RxCpltCallback+0x294>)
 80008b6:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80008b8:	210c      	movs	r1, #12
 80008ba:	4817      	ldr	r0, [pc, #92]	; (8000918 <HAL_UART_RxCpltCallback+0x288>)
 80008bc:	f001 fc7a 	bl	80021b4 <HAL_TIM_PWM_Start>

		// Seteamos menu y estado de seleccion
		seleccion_usuario = none;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <HAL_UART_RxCpltCallback+0x268>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	801a      	strh	r2, [r3, #0]
		menu_seleccion(0, 0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2000      	movs	r0, #0
 80008ca:	f003 fd1f 	bl	800430c <menu_seleccion>

		RX_char = 0x00;
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &RX_char, 1);
 80008d4:	2201      	movs	r2, #1
 80008d6:	490b      	ldr	r1, [pc, #44]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <HAL_UART_RxCpltCallback+0x27c>)
 80008da:	f002 fc5f 	bl	800319c <HAL_UART_Receive_IT>
		return;
 80008de:	e008      	b.n	80008f2 <HAL_UART_RxCpltCallback+0x262>
	}

	RX_char = 0x00;
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, &RX_char, 1);
 80008e6:	2201      	movs	r2, #1
 80008e8:	4906      	ldr	r1, [pc, #24]	; (8000904 <HAL_UART_RxCpltCallback+0x274>)
 80008ea:	4808      	ldr	r0, [pc, #32]	; (800090c <HAL_UART_RxCpltCallback+0x27c>)
 80008ec:	f002 fc56 	bl	800319c <HAL_UART_Receive_IT>
	return;
 80008f0:	bf00      	nop

}
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200004e6 	.word	0x200004e6
 80008fc:	200004e0 	.word	0x200004e0
 8000900:	200004e8 	.word	0x200004e8
 8000904:	200004d4 	.word	0x200004d4
 8000908:	200000f8 	.word	0x200000f8
 800090c:	200005c0 	.word	0x200005c0
 8000910:	200004e1 	.word	0x200004e1
 8000914:	20000530 	.word	0x20000530
 8000918:	20000578 	.word	0x20000578
 800091c:	200000b0 	.word	0x200000b0
 8000920:	200004e2 	.word	0x200004e2
 8000924:	40000400 	.word	0x40000400

08000928 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000930:	e7fe      	b.n	8000930 <Error_Handler+0x8>
	...

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_MspInit+0x5c>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <HAL_MspInit+0x5c>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_MspInit+0x5c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_MspInit+0x5c>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <HAL_MspInit+0x5c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_MspInit+0x5c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_MspInit+0x60>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <HAL_MspInit+0x60>)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	40021000 	.word	0x40021000
 8000994:	40010000 	.word	0x40010000

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009de:	f000 fb21 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor_2_Pin);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f000 fe92 	bl	8001714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor_1_Pin);
 80009f8:	2080      	movs	r0, #128	; 0x80
 80009fa:	f000 fe8b 	bl	8001714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <TIM2_IRQHandler+0x10>)
 8000a0a:	f001 fcd9 	bl	80023c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000530 	.word	0x20000530

08000a18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <USART3_IRQHandler+0x10>)
 8000a1e:	f002 fbe3 	bl	80031e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200005c0 	.word	0x200005c0

08000a2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pulsador_parada_Pin);
 8000a30:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a34:	f000 fe6e 	bl	8001714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b096      	sub	sp, #88	; 0x58
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
 8000a76:	615a      	str	r2, [r3, #20]
 8000a78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2220      	movs	r2, #32
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f003 fe05 	bl	8004690 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a86:	4b3e      	ldr	r3, [pc, #248]	; (8000b80 <MX_TIM1_Init+0x138>)
 8000a88:	4a3e      	ldr	r2, [pc, #248]	; (8000b84 <MX_TIM1_Init+0x13c>)
 8000a8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 36000;
 8000a8c:	4b3c      	ldr	r3, [pc, #240]	; (8000b80 <MX_TIM1_Init+0x138>)
 8000a8e:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8000a92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a94:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <MX_TIM1_Init+0x138>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000a9a:	4b39      	ldr	r3, [pc, #228]	; (8000b80 <MX_TIM1_Init+0x138>)
 8000a9c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000aa0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa2:	4b37      	ldr	r3, [pc, #220]	; (8000b80 <MX_TIM1_Init+0x138>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aa8:	4b35      	ldr	r3, [pc, #212]	; (8000b80 <MX_TIM1_Init+0x138>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aae:	4b34      	ldr	r3, [pc, #208]	; (8000b80 <MX_TIM1_Init+0x138>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ab4:	4832      	ldr	r0, [pc, #200]	; (8000b80 <MX_TIM1_Init+0x138>)
 8000ab6:	f001 fa55 	bl	8001f64 <HAL_TIM_Base_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ac0:	f7ff ff32 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ace:	4619      	mov	r1, r3
 8000ad0:	482b      	ldr	r0, [pc, #172]	; (8000b80 <MX_TIM1_Init+0x138>)
 8000ad2:	f001 fe3f 	bl	8002754 <HAL_TIM_ConfigClockSource>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000adc:	f7ff ff24 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ae0:	4827      	ldr	r0, [pc, #156]	; (8000b80 <MX_TIM1_Init+0x138>)
 8000ae2:	f001 fb0f 	bl	8002104 <HAL_TIM_PWM_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000aec:	f7ff ff1c 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af0:	2300      	movs	r3, #0
 8000af2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000af8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000afc:	4619      	mov	r1, r3
 8000afe:	4820      	ldr	r0, [pc, #128]	; (8000b80 <MX_TIM1_Init+0x138>)
 8000b00:	f002 f9b8 	bl	8002e74 <HAL_TIMEx_MasterConfigSynchronization>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000b0a:	f7ff ff0d 	bl	8000928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b0e:	2360      	movs	r3, #96	; 0x60
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8000b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	220c      	movs	r2, #12
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4813      	ldr	r0, [pc, #76]	; (8000b80 <MX_TIM1_Init+0x138>)
 8000b32:	f001 fd4d 	bl	80025d0 <HAL_TIM_PWM_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b3c:	f7ff fef4 	bl	8000928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4619      	mov	r1, r3
 8000b62:	4807      	ldr	r0, [pc, #28]	; (8000b80 <MX_TIM1_Init+0x138>)
 8000b64:	f002 f9e4 	bl	8002f30 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000b6e:	f7ff fedb 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b72:	4803      	ldr	r0, [pc, #12]	; (8000b80 <MX_TIM1_Init+0x138>)
 8000b74:	f000 f916 	bl	8000da4 <HAL_TIM_MspPostInit>

}
 8000b78:	bf00      	nop
 8000b7a:	3758      	adds	r7, #88	; 0x58
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200004e8 	.word	0x200004e8
 8000b84:	40012c00 	.word	0x40012c00

08000b88 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000ba6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000baa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3000;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bae:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000bb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb4:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 240;
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bbc:	22f0      	movs	r2, #240	; 0xf0
 8000bbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bce:	f001 f9c9 	bl	8001f64 <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bd8:	f7ff fea6 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	4619      	mov	r1, r3
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000bea:	f001 fdb3 	bl	8002754 <HAL_TIM_ConfigClockSource>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bf4:	f7ff fe98 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c00:	463b      	mov	r3, r7
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_TIM2_Init+0x94>)
 8000c06:	f002 f935 	bl	8002e74 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f7ff fe8a 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000530 	.word	0x20000530

08000c20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	; 0x38
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	f107 0320 	add.w	r3, r7, #32
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
 8000c4c:	615a      	str	r2, [r3, #20]
 8000c4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c50:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000c52:	4a2d      	ldr	r2, [pc, #180]	; (8000d08 <MX_TIM3_Init+0xe8>)
 8000c54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 22;
 8000c56:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000c58:	2216      	movs	r2, #22
 8000c5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65454;
 8000c62:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000c64:	f64f 72ae 	movw	r2, #65454	; 0xffae
 8000c68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6a:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c70:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c76:	4823      	ldr	r0, [pc, #140]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000c78:	f001 f974 	bl	8001f64 <HAL_TIM_Base_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c82:	f7ff fe51 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c90:	4619      	mov	r1, r3
 8000c92:	481c      	ldr	r0, [pc, #112]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000c94:	f001 fd5e 	bl	8002754 <HAL_TIM_ConfigClockSource>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c9e:	f7ff fe43 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ca2:	4818      	ldr	r0, [pc, #96]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000ca4:	f001 fa2e 	bl	8002104 <HAL_TIM_PWM_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000cae:	f7ff fe3b 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cba:	f107 0320 	add.w	r3, r7, #32
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4810      	ldr	r0, [pc, #64]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000cc2:	f002 f8d7 	bl	8002e74 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ccc:	f7ff fe2c 	bl	8000928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd0:	2360      	movs	r3, #96	; 0x60
 8000cd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4807      	ldr	r0, [pc, #28]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000ce8:	f001 fc72 	bl	80025d0 <HAL_TIM_PWM_ConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000cf2:	f7ff fe19 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cf6:	4803      	ldr	r0, [pc, #12]	; (8000d04 <MX_TIM3_Init+0xe4>)
 8000cf8:	f000 f854 	bl	8000da4 <HAL_TIM_MspPostInit>

}
 8000cfc:	bf00      	nop
 8000cfe:	3738      	adds	r7, #56	; 0x38
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000578 	.word	0x20000578
 8000d08:	40000400 	.word	0x40000400

08000d0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <HAL_TIM_Base_MspInit+0x8c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d10c      	bne.n	8000d38 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <HAL_TIM_Base_MspInit+0x90>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a1e      	ldr	r2, [pc, #120]	; (8000d9c <HAL_TIM_Base_MspInit+0x90>)
 8000d24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d28:	6193      	str	r3, [r2, #24]
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <HAL_TIM_Base_MspInit+0x90>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000d36:	e02a      	b.n	8000d8e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d40:	d114      	bne.n	8000d6c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <HAL_TIM_Base_MspInit+0x90>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <HAL_TIM_Base_MspInit+0x90>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <HAL_TIM_Base_MspInit+0x90>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	201c      	movs	r0, #28
 8000d60:	f000 fa53 	bl	800120a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d64:	201c      	movs	r0, #28
 8000d66:	f000 fa6c 	bl	8001242 <HAL_NVIC_EnableIRQ>
}
 8000d6a:	e010      	b.n	8000d8e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <HAL_TIM_Base_MspInit+0x94>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d10b      	bne.n	8000d8e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_TIM_Base_MspInit+0x90>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_TIM_Base_MspInit+0x90>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	61d3      	str	r3, [r2, #28]
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_TIM_Base_MspInit+0x90>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40012c00 	.word	0x40012c00
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40000400 	.word	0x40000400

08000da4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <HAL_TIM_MspPostInit+0x98>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d119      	bne.n	8000df8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <HAL_TIM_MspPostInit+0x9c>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <HAL_TIM_MspPostInit+0x9c>)
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <HAL_TIM_MspPostInit+0x9c>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = led_alerta_Pin;
 8000ddc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000de0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(led_alerta_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	4619      	mov	r1, r3
 8000df0:	4814      	ldr	r0, [pc, #80]	; (8000e44 <HAL_TIM_MspPostInit+0xa0>)
 8000df2:	f000 faf3 	bl	80013dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000df6:	e01c      	b.n	8000e32 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM3)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <HAL_TIM_MspPostInit+0xa4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d117      	bne.n	8000e32 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_TIM_MspPostInit+0x9c>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_TIM_MspPostInit+0x9c>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_TIM_MspPostInit+0x9c>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = motor_2_Pin;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(motor_2_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4807      	ldr	r0, [pc, #28]	; (8000e4c <HAL_TIM_MspPostInit+0xa8>)
 8000e2e:	f000 fad5 	bl	80013dc <HAL_GPIO_Init>
}
 8000e32:	bf00      	nop
 8000e34:	3720      	adds	r7, #32
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40012c00 	.word	0x40012c00
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40010800 	.word	0x40010800
 8000e48:	40000400 	.word	0x40000400
 8000e4c:	40010c00 	.word	0x40010c00

08000e50 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_USART3_UART_Init+0x4c>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <MX_USART3_UART_Init+0x50>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_USART3_UART_Init+0x4c>)
 8000e5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_USART3_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_USART3_UART_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_USART3_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_USART3_UART_Init+0x4c>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_USART3_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_USART3_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_USART3_UART_Init+0x4c>)
 8000e88:	f002 f8b5 	bl	8002ff6 <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e92:	f7ff fd49 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200005c0 	.word	0x200005c0
 8000ea0:	40004800 	.word	0x40004800

08000ea4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a20      	ldr	r2, [pc, #128]	; (8000f40 <HAL_UART_MspInit+0x9c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d139      	bne.n	8000f38 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <HAL_UART_MspInit+0xa0>)
 8000ec6:	69db      	ldr	r3, [r3, #28]
 8000ec8:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <HAL_UART_MspInit+0xa0>)
 8000eca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ece:	61d3      	str	r3, [r2, #28]
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <HAL_UART_MspInit+0xa0>)
 8000ed2:	69db      	ldr	r3, [r3, #28]
 8000ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <HAL_UART_MspInit+0xa0>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a18      	ldr	r2, [pc, #96]	; (8000f44 <HAL_UART_MspInit+0xa0>)
 8000ee2:	f043 0308 	orr.w	r3, r3, #8
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <HAL_UART_MspInit+0xa0>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0308 	and.w	r3, r3, #8
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4619      	mov	r1, r3
 8000f08:	480f      	ldr	r0, [pc, #60]	; (8000f48 <HAL_UART_MspInit+0xa4>)
 8000f0a:	f000 fa67 	bl	80013dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	4809      	ldr	r0, [pc, #36]	; (8000f48 <HAL_UART_MspInit+0xa4>)
 8000f24:	f000 fa5a 	bl	80013dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	2027      	movs	r0, #39	; 0x27
 8000f2e:	f000 f96c 	bl	800120a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f32:	2027      	movs	r0, #39	; 0x27
 8000f34:	f000 f985 	bl	8001242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40004800 	.word	0x40004800
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010c00 	.word	0x40010c00

08000f4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f4c:	f7ff fd76 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480b      	ldr	r0, [pc, #44]	; (8000f80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f52:	490c      	ldr	r1, [pc, #48]	; (8000f84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f54:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f68:	4c09      	ldr	r4, [pc, #36]	; (8000f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f003 fb67 	bl	8004648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f7a:	f7ff f98b 	bl	8000294 <main>
  bx lr
 8000f7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	200004b8 	.word	0x200004b8
  ldr r2, =_sidata
 8000f88:	08004718 	.word	0x08004718
  ldr r2, =_sbss
 8000f8c:	200004b8 	.word	0x200004b8
  ldr r4, =_ebss
 8000f90:	2000060c 	.word	0x2000060c

08000f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_2_IRQHandler>
	...

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_Init+0x28>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_Init+0x28>)
 8000fa2:	f043 0310 	orr.w	r3, r3, #16
 8000fa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 f923 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	200f      	movs	r0, #15
 8000fb0:	f000 f808 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f7ff fcbe 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40022000 	.word	0x40022000

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f93b 	bl	800125e <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 f903 	bl	800120a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000110 	.word	0x20000110
 800101c:	20000118 	.word	0x20000118
 8001020:	20000114 	.word	0x20000114

08001024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_IncTick+0x1c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_IncTick+0x20>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a03      	ldr	r2, [pc, #12]	; (8001044 <HAL_IncTick+0x20>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	20000118 	.word	0x20000118
 8001044:	20000608 	.word	0x20000608

08001048 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b02      	ldr	r3, [pc, #8]	; (8001058 <HAL_GetTick+0x10>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	20000608 	.word	0x20000608

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db0b      	blt.n	80010ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 021f 	and.w	r2, r3, #31
 80010d8:	4906      	ldr	r1, [pc, #24]	; (80010f4 <__NVIC_EnableIRQ+0x34>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	2001      	movs	r0, #1
 80010e2:	fa00 f202 	lsl.w	r2, r0, r2
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	; (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	; (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
         );
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c0:	d301      	bcc.n	80011c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00f      	b.n	80011e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <SysTick_Config+0x40>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ce:	210f      	movs	r1, #15
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f7ff ff90 	bl	80010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SysTick_Config+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SysTick_Config+0x40>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff2d 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800121c:	f7ff ff42 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 8001220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f7ff ff90 	bl	800114c <NVIC_EncodePriority>
 800122c:	4602      	mov	r2, r0
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff5f 	bl	80010f8 <__NVIC_SetPriority>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff35 	bl	80010c0 <__NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffa2 	bl	80011b0 <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001276:	b480      	push	{r7}
 8001278:	b085      	sub	sp, #20
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d008      	beq.n	80012a0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2204      	movs	r2, #4
 8001292:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e020      	b.n	80012e2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 020e 	bic.w	r2, r2, #14
 80012ae:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0201 	bic.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c8:	2101      	movs	r1, #1
 80012ca:	fa01 f202 	lsl.w	r2, r1, r2
 80012ce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d005      	beq.n	8001310 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2204      	movs	r2, #4
 8001308:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e051      	b.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 020e 	bic.w	r2, r2, #14
 800131e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0201 	bic.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <HAL_DMA_Abort_IT+0xd4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d029      	beq.n	800138e <HAL_DMA_Abort_IT+0xa2>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a21      	ldr	r2, [pc, #132]	; (80013c4 <HAL_DMA_Abort_IT+0xd8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d022      	beq.n	800138a <HAL_DMA_Abort_IT+0x9e>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <HAL_DMA_Abort_IT+0xdc>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d01a      	beq.n	8001384 <HAL_DMA_Abort_IT+0x98>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <HAL_DMA_Abort_IT+0xe0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d012      	beq.n	800137e <HAL_DMA_Abort_IT+0x92>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <HAL_DMA_Abort_IT+0xe4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00a      	beq.n	8001378 <HAL_DMA_Abort_IT+0x8c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <HAL_DMA_Abort_IT+0xe8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d102      	bne.n	8001372 <HAL_DMA_Abort_IT+0x86>
 800136c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001370:	e00e      	b.n	8001390 <HAL_DMA_Abort_IT+0xa4>
 8001372:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001376:	e00b      	b.n	8001390 <HAL_DMA_Abort_IT+0xa4>
 8001378:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800137c:	e008      	b.n	8001390 <HAL_DMA_Abort_IT+0xa4>
 800137e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001382:	e005      	b.n	8001390 <HAL_DMA_Abort_IT+0xa4>
 8001384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001388:	e002      	b.n	8001390 <HAL_DMA_Abort_IT+0xa4>
 800138a:	2310      	movs	r3, #16
 800138c:	e000      	b.n	8001390 <HAL_DMA_Abort_IT+0xa4>
 800138e:	2301      	movs	r3, #1
 8001390:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <HAL_DMA_Abort_IT+0xec>)
 8001392:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	4798      	blx	r3
    } 
  }
  return status;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40020008 	.word	0x40020008
 80013c4:	4002001c 	.word	0x4002001c
 80013c8:	40020030 	.word	0x40020030
 80013cc:	40020044 	.word	0x40020044
 80013d0:	40020058 	.word	0x40020058
 80013d4:	4002006c 	.word	0x4002006c
 80013d8:	40020000 	.word	0x40020000

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	b480      	push	{r7}
 80013de:	b08b      	sub	sp, #44	; 0x2c
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ee:	e169      	b.n	80016c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013f0:	2201      	movs	r2, #1
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	69fa      	ldr	r2, [r7, #28]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	429a      	cmp	r2, r3
 800140a:	f040 8158 	bne.w	80016be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a9a      	ldr	r2, [pc, #616]	; (800167c <HAL_GPIO_Init+0x2a0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d05e      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
 8001418:	4a98      	ldr	r2, [pc, #608]	; (800167c <HAL_GPIO_Init+0x2a0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d875      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 800141e:	4a98      	ldr	r2, [pc, #608]	; (8001680 <HAL_GPIO_Init+0x2a4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d058      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
 8001424:	4a96      	ldr	r2, [pc, #600]	; (8001680 <HAL_GPIO_Init+0x2a4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d86f      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 800142a:	4a96      	ldr	r2, [pc, #600]	; (8001684 <HAL_GPIO_Init+0x2a8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d052      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
 8001430:	4a94      	ldr	r2, [pc, #592]	; (8001684 <HAL_GPIO_Init+0x2a8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d869      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 8001436:	4a94      	ldr	r2, [pc, #592]	; (8001688 <HAL_GPIO_Init+0x2ac>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d04c      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
 800143c:	4a92      	ldr	r2, [pc, #584]	; (8001688 <HAL_GPIO_Init+0x2ac>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d863      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 8001442:	4a92      	ldr	r2, [pc, #584]	; (800168c <HAL_GPIO_Init+0x2b0>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d046      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
 8001448:	4a90      	ldr	r2, [pc, #576]	; (800168c <HAL_GPIO_Init+0x2b0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d85d      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 800144e:	2b12      	cmp	r3, #18
 8001450:	d82a      	bhi.n	80014a8 <HAL_GPIO_Init+0xcc>
 8001452:	2b12      	cmp	r3, #18
 8001454:	d859      	bhi.n	800150a <HAL_GPIO_Init+0x12e>
 8001456:	a201      	add	r2, pc, #4	; (adr r2, 800145c <HAL_GPIO_Init+0x80>)
 8001458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145c:	080014d7 	.word	0x080014d7
 8001460:	080014b1 	.word	0x080014b1
 8001464:	080014c3 	.word	0x080014c3
 8001468:	08001505 	.word	0x08001505
 800146c:	0800150b 	.word	0x0800150b
 8001470:	0800150b 	.word	0x0800150b
 8001474:	0800150b 	.word	0x0800150b
 8001478:	0800150b 	.word	0x0800150b
 800147c:	0800150b 	.word	0x0800150b
 8001480:	0800150b 	.word	0x0800150b
 8001484:	0800150b 	.word	0x0800150b
 8001488:	0800150b 	.word	0x0800150b
 800148c:	0800150b 	.word	0x0800150b
 8001490:	0800150b 	.word	0x0800150b
 8001494:	0800150b 	.word	0x0800150b
 8001498:	0800150b 	.word	0x0800150b
 800149c:	0800150b 	.word	0x0800150b
 80014a0:	080014b9 	.word	0x080014b9
 80014a4:	080014cd 	.word	0x080014cd
 80014a8:	4a79      	ldr	r2, [pc, #484]	; (8001690 <HAL_GPIO_Init+0x2b4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d013      	beq.n	80014d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ae:	e02c      	b.n	800150a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	623b      	str	r3, [r7, #32]
          break;
 80014b6:	e029      	b.n	800150c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	3304      	adds	r3, #4
 80014be:	623b      	str	r3, [r7, #32]
          break;
 80014c0:	e024      	b.n	800150c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	3308      	adds	r3, #8
 80014c8:	623b      	str	r3, [r7, #32]
          break;
 80014ca:	e01f      	b.n	800150c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	330c      	adds	r3, #12
 80014d2:	623b      	str	r3, [r7, #32]
          break;
 80014d4:	e01a      	b.n	800150c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014de:	2304      	movs	r3, #4
 80014e0:	623b      	str	r3, [r7, #32]
          break;
 80014e2:	e013      	b.n	800150c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d105      	bne.n	80014f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ec:	2308      	movs	r3, #8
 80014ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	611a      	str	r2, [r3, #16]
          break;
 80014f6:	e009      	b.n	800150c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f8:	2308      	movs	r3, #8
 80014fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	615a      	str	r2, [r3, #20]
          break;
 8001502:	e003      	b.n	800150c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
          break;
 8001508:	e000      	b.n	800150c <HAL_GPIO_Init+0x130>
          break;
 800150a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2bff      	cmp	r3, #255	; 0xff
 8001510:	d801      	bhi.n	8001516 <HAL_GPIO_Init+0x13a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	e001      	b.n	800151a <HAL_GPIO_Init+0x13e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3304      	adds	r3, #4
 800151a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	2bff      	cmp	r3, #255	; 0xff
 8001520:	d802      	bhi.n	8001528 <HAL_GPIO_Init+0x14c>
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	e002      	b.n	800152e <HAL_GPIO_Init+0x152>
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	3b08      	subs	r3, #8
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	210f      	movs	r1, #15
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	401a      	ands	r2, r3
 8001540:	6a39      	ldr	r1, [r7, #32]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	431a      	orrs	r2, r3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 80b1 	beq.w	80016be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800155c:	4b4d      	ldr	r3, [pc, #308]	; (8001694 <HAL_GPIO_Init+0x2b8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a4c      	ldr	r2, [pc, #304]	; (8001694 <HAL_GPIO_Init+0x2b8>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b4a      	ldr	r3, [pc, #296]	; (8001694 <HAL_GPIO_Init+0x2b8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001574:	4a48      	ldr	r2, [pc, #288]	; (8001698 <HAL_GPIO_Init+0x2bc>)
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001580:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	220f      	movs	r2, #15
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a40      	ldr	r2, [pc, #256]	; (800169c <HAL_GPIO_Init+0x2c0>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d013      	beq.n	80015c8 <HAL_GPIO_Init+0x1ec>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a3f      	ldr	r2, [pc, #252]	; (80016a0 <HAL_GPIO_Init+0x2c4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d00d      	beq.n	80015c4 <HAL_GPIO_Init+0x1e8>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a3e      	ldr	r2, [pc, #248]	; (80016a4 <HAL_GPIO_Init+0x2c8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d007      	beq.n	80015c0 <HAL_GPIO_Init+0x1e4>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a3d      	ldr	r2, [pc, #244]	; (80016a8 <HAL_GPIO_Init+0x2cc>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d101      	bne.n	80015bc <HAL_GPIO_Init+0x1e0>
 80015b8:	2303      	movs	r3, #3
 80015ba:	e006      	b.n	80015ca <HAL_GPIO_Init+0x1ee>
 80015bc:	2304      	movs	r3, #4
 80015be:	e004      	b.n	80015ca <HAL_GPIO_Init+0x1ee>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e002      	b.n	80015ca <HAL_GPIO_Init+0x1ee>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <HAL_GPIO_Init+0x1ee>
 80015c8:	2300      	movs	r3, #0
 80015ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015cc:	f002 0203 	and.w	r2, r2, #3
 80015d0:	0092      	lsls	r2, r2, #2
 80015d2:	4093      	lsls	r3, r2
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015da:	492f      	ldr	r1, [pc, #188]	; (8001698 <HAL_GPIO_Init+0x2bc>)
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	089b      	lsrs	r3, r3, #2
 80015e0:	3302      	adds	r3, #2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015f4:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	492c      	ldr	r1, [pc, #176]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	608b      	str	r3, [r1, #8]
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	43db      	mvns	r3, r3
 800160a:	4928      	ldr	r1, [pc, #160]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 800160c:	4013      	ands	r3, r2
 800160e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800161c:	4b23      	ldr	r3, [pc, #140]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	4922      	ldr	r1, [pc, #136]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	60cb      	str	r3, [r1, #12]
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	43db      	mvns	r3, r3
 8001632:	491e      	ldr	r1, [pc, #120]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 8001634:	4013      	ands	r3, r2
 8001636:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d006      	beq.n	8001652 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4918      	ldr	r1, [pc, #96]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	43db      	mvns	r3, r3
 800165a:	4914      	ldr	r1, [pc, #80]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 800165c:	4013      	ands	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d021      	beq.n	80016b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	490e      	ldr	r1, [pc, #56]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
 8001678:	e021      	b.n	80016be <HAL_GPIO_Init+0x2e2>
 800167a:	bf00      	nop
 800167c:	10320000 	.word	0x10320000
 8001680:	10310000 	.word	0x10310000
 8001684:	10220000 	.word	0x10220000
 8001688:	10210000 	.word	0x10210000
 800168c:	10120000 	.word	0x10120000
 8001690:	10110000 	.word	0x10110000
 8001694:	40021000 	.word	0x40021000
 8001698:	40010000 	.word	0x40010000
 800169c:	40010800 	.word	0x40010800
 80016a0:	40010c00 	.word	0x40010c00
 80016a4:	40011000 	.word	0x40011000
 80016a8:	40011400 	.word	0x40011400
 80016ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_GPIO_Init+0x304>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	4909      	ldr	r1, [pc, #36]	; (80016e0 <HAL_GPIO_Init+0x304>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	3301      	adds	r3, #1
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	fa22 f303 	lsr.w	r3, r2, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f47f ae8e 	bne.w	80013f0 <HAL_GPIO_Init+0x14>
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	372c      	adds	r7, #44	; 0x2c
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	40010400 	.word	0x40010400

080016e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
 80016f0:	4613      	mov	r3, r2
 80016f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f4:	787b      	ldrb	r3, [r7, #1]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001700:	e003      	b.n	800170a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	041a      	lsls	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	611a      	str	r2, [r3, #16]
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fe3e 	bl	80003b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40010400 	.word	0x40010400

08001744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e272      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8087 	beq.w	8001872 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001764:	4b92      	ldr	r3, [pc, #584]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b04      	cmp	r3, #4
 800176e:	d00c      	beq.n	800178a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001770:	4b8f      	ldr	r3, [pc, #572]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d112      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
 800177c:	4b8c      	ldr	r3, [pc, #560]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001788:	d10b      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178a:	4b89      	ldr	r3, [pc, #548]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d06c      	beq.n	8001870 <HAL_RCC_OscConfig+0x12c>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d168      	bne.n	8001870 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e24c      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x76>
 80017ac:	4b80      	ldr	r3, [pc, #512]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a7f      	ldr	r2, [pc, #508]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e02e      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x98>
 80017c2:	4b7b      	ldr	r3, [pc, #492]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a7a      	ldr	r2, [pc, #488]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b78      	ldr	r3, [pc, #480]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a77      	ldr	r2, [pc, #476]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e01d      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0xbc>
 80017e6:	4b72      	ldr	r3, [pc, #456]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a71      	ldr	r2, [pc, #452]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b6f      	ldr	r3, [pc, #444]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6e      	ldr	r2, [pc, #440]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 8001800:	4b6b      	ldr	r3, [pc, #428]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a6a      	ldr	r2, [pc, #424]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b68      	ldr	r3, [pc, #416]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a67      	ldr	r2, [pc, #412]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fc12 	bl	8001048 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fc0e 	bl	8001048 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e200      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b5d      	ldr	r3, [pc, #372]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0xe4>
 8001846:	e014      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fbfe 	bl	8001048 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fbfa 	bl	8001048 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1ec      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x10c>
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d063      	beq.n	8001946 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800187e:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00b      	beq.n	80018a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800188a:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b08      	cmp	r3, #8
 8001894:	d11c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x18c>
 8001896:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d116      	bne.n	80018d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_OscConfig+0x176>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e1c0      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4939      	ldr	r1, [pc, #228]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	e03a      	b.n	8001946 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d020      	beq.n	800191a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d8:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff fbb3 	bl	8001048 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fbaf 	bl	8001048 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1a1      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4927      	ldr	r1, [pc, #156]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fb92 	bl	8001048 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001928:	f7ff fb8e 	bl	8001048 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e180      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d03a      	beq.n	80019c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d019      	beq.n	800198e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_RCC_OscConfig+0x274>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001960:	f7ff fb72 	bl	8001048 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff fb6e 	bl	8001048 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e160      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001986:	2001      	movs	r0, #1
 8001988:	f000 face 	bl	8001f28 <RCC_Delay>
 800198c:	e01c      	b.n	80019c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001994:	f7ff fb58 	bl	8001048 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199a:	e00f      	b.n	80019bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff fb54 	bl	8001048 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d908      	bls.n	80019bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e146      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	42420000 	.word	0x42420000
 80019b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019bc:	4b92      	ldr	r3, [pc, #584]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1e9      	bne.n	800199c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 80a6 	beq.w	8001b22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019da:	4b8b      	ldr	r3, [pc, #556]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10d      	bne.n	8001a02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a87      	ldr	r2, [pc, #540]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	4b85      	ldr	r3, [pc, #532]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fe:	2301      	movs	r3, #1
 8001a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a02:	4b82      	ldr	r3, [pc, #520]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d118      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a7e      	ldr	r2, [pc, #504]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff fb15 	bl	8001048 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a22:	f7ff fb11 	bl	8001048 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b64      	cmp	r3, #100	; 0x64
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e103      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	4b75      	ldr	r3, [pc, #468]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x312>
 8001a48:	4b6f      	ldr	r3, [pc, #444]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4a6e      	ldr	r2, [pc, #440]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6213      	str	r3, [r2, #32]
 8001a54:	e02d      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x334>
 8001a5e:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a69      	ldr	r2, [pc, #420]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6213      	str	r3, [r2, #32]
 8001a6a:	4b67      	ldr	r3, [pc, #412]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a66      	ldr	r2, [pc, #408]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6213      	str	r3, [r2, #32]
 8001a76:	e01c      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d10c      	bne.n	8001a9a <HAL_RCC_OscConfig+0x356>
 8001a80:	4b61      	ldr	r3, [pc, #388]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4a60      	ldr	r2, [pc, #384]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	6213      	str	r3, [r2, #32]
 8001a8c:	4b5e      	ldr	r3, [pc, #376]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4a5d      	ldr	r2, [pc, #372]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6213      	str	r3, [r2, #32]
 8001a98:	e00b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a9a:	4b5b      	ldr	r3, [pc, #364]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a5a      	ldr	r2, [pc, #360]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	4b58      	ldr	r3, [pc, #352]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4a57      	ldr	r2, [pc, #348]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d015      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff fac5 	bl	8001048 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff fac1 	bl	8001048 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0b1      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0ee      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x37e>
 8001ae4:	e014      	b.n	8001b10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff faaf 	bl	8001048 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff faab 	bl	8001048 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e09b      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b04:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ee      	bne.n	8001aee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d105      	bne.n	8001b22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b16:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a3b      	ldr	r2, [pc, #236]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8087 	beq.w	8001c3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2c:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d061      	beq.n	8001bfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d146      	bne.n	8001bce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fa7f 	bl	8001048 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7ff fa7b 	bl	8001048 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e06d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d108      	bne.n	8001b88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	4921      	ldr	r1, [pc, #132]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a19      	ldr	r1, [r3, #32]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	491b      	ldr	r1, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fa4f 	bl	8001048 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bae:	f7ff fa4b 	bl	8001048 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e03d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x46a>
 8001bcc:	e035      	b.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fa38 	bl	8001048 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff fa34 	bl	8001048 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e026      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x498>
 8001bfa:	e01e      	b.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e019      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_OscConfig+0x500>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000

08001c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0d0      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d910      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 0207 	bic.w	r2, r3, #7
 8001c72:	4965      	ldr	r1, [pc, #404]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0b8      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca4:	4b59      	ldr	r3, [pc, #356]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a58      	ldr	r2, [pc, #352]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cbc:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc8:	4b50      	ldr	r3, [pc, #320]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	494d      	ldr	r1, [pc, #308]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d040      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d115      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e07f      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e073      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06b      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4936      	ldr	r1, [pc, #216]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7ff f986 	bl	8001048 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff f982 	bl	8001048 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e053      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d210      	bcs.n	8001d98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	4922      	ldr	r1, [pc, #136]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e032      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4916      	ldr	r1, [pc, #88]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	490e      	ldr	r1, [pc, #56]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dd6:	f000 f821 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	490a      	ldr	r1, [pc, #40]	; (8001e10 <HAL_RCC_ClockConfig+0x1c8>)
 8001de8:	5ccb      	ldrb	r3, [r1, r3]
 8001dea:	fa22 f303 	lsr.w	r3, r2, r3
 8001dee:	4a09      	ldr	r2, [pc, #36]	; (8001e14 <HAL_RCC_ClockConfig+0x1cc>)
 8001df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_ClockConfig+0x1d0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f8e4 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40022000 	.word	0x40022000
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	080046d0 	.word	0x080046d0
 8001e14:	20000110 	.word	0x20000110
 8001e18:	20000114 	.word	0x20000114

08001e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d002      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x30>
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d003      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0x36>
 8001e4a:	e027      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e4c:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e4e:	613b      	str	r3, [r7, #16]
      break;
 8001e50:	e027      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	0c9b      	lsrs	r3, r3, #18
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	4a17      	ldr	r2, [pc, #92]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d010      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	0c5b      	lsrs	r3, r3, #17
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	4a11      	ldr	r2, [pc, #68]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e7e:	fb03 f202 	mul.w	r2, r3, r2
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	e004      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e90:	fb02 f303 	mul.w	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	613b      	str	r3, [r7, #16]
      break;
 8001e9a:	e002      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e9e:	613b      	str	r3, [r7, #16]
      break;
 8001ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea2:	693b      	ldr	r3, [r7, #16]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	007a1200 	.word	0x007a1200
 8001eb8:	080046e8 	.word	0x080046e8
 8001ebc:	080046f8 	.word	0x080046f8
 8001ec0:	003d0900 	.word	0x003d0900

08001ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec8:	4b02      	ldr	r3, [pc, #8]	; (8001ed4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	20000110 	.word	0x20000110

08001ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001edc:	f7ff fff2 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4903      	ldr	r1, [pc, #12]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	080046e0 	.word	0x080046e0

08001f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f04:	f7ff ffde 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	0adb      	lsrs	r3, r3, #11
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4903      	ldr	r1, [pc, #12]	; (8001f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	080046e0 	.word	0x080046e0

08001f28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <RCC_Delay+0x34>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <RCC_Delay+0x38>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0a5b      	lsrs	r3, r3, #9
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f44:	bf00      	nop
  }
  while (Delay --);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	60fa      	str	r2, [r7, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f9      	bne.n	8001f44 <RCC_Delay+0x1c>
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	20000110 	.word	0x20000110
 8001f60:	10624dd3 	.word	0x10624dd3

08001f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e041      	b.n	8001ffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe febe 	bl	8000d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	f000 fcc2 	bl	800292c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d001      	beq.n	800201c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e03a      	b.n	8002092 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a18      	ldr	r2, [pc, #96]	; (800209c <HAL_TIM_Base_Start_IT+0x98>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00e      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x58>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002046:	d009      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x58>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d004      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x58>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a13      	ldr	r2, [pc, #76]	; (80020a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d111      	bne.n	8002080 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b06      	cmp	r3, #6
 800206c:	d010      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207e:	e007      	b.n	8002090 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	40012c00 	.word	0x40012c00
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40000800 	.word	0x40000800

080020a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6a1a      	ldr	r2, [r3, #32]
 80020c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10f      	bne.n	80020f0 <HAL_TIM_Base_Stop_IT+0x48>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6a1a      	ldr	r2, [r3, #32]
 80020d6:	f240 4344 	movw	r3, #1092	; 0x444
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_TIM_Base_Stop_IT+0x48>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e041      	b.n	800219a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f839 	bl	80021a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3304      	adds	r3, #4
 8002140:	4619      	mov	r1, r3
 8002142:	4610      	mov	r0, r2
 8002144:	f000 fbf2 	bl	800292c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d109      	bne.n	80021d8 <HAL_TIM_PWM_Start+0x24>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	bf14      	ite	ne
 80021d0:	2301      	movne	r3, #1
 80021d2:	2300      	moveq	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	e022      	b.n	800221e <HAL_TIM_PWM_Start+0x6a>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d109      	bne.n	80021f2 <HAL_TIM_PWM_Start+0x3e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	e015      	b.n	800221e <HAL_TIM_PWM_Start+0x6a>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d109      	bne.n	800220c <HAL_TIM_PWM_Start+0x58>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b01      	cmp	r3, #1
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	e008      	b.n	800221e <HAL_TIM_PWM_Start+0x6a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b01      	cmp	r3, #1
 8002216:	bf14      	ite	ne
 8002218:	2301      	movne	r3, #1
 800221a:	2300      	moveq	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e05e      	b.n	80022e4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d104      	bne.n	8002236 <HAL_TIM_PWM_Start+0x82>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002234:	e013      	b.n	800225e <HAL_TIM_PWM_Start+0xaa>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b04      	cmp	r3, #4
 800223a:	d104      	bne.n	8002246 <HAL_TIM_PWM_Start+0x92>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002244:	e00b      	b.n	800225e <HAL_TIM_PWM_Start+0xaa>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b08      	cmp	r3, #8
 800224a:	d104      	bne.n	8002256 <HAL_TIM_PWM_Start+0xa2>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002254:	e003      	b.n	800225e <HAL_TIM_PWM_Start+0xaa>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2201      	movs	r2, #1
 8002264:	6839      	ldr	r1, [r7, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 fde0 	bl	8002e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1e      	ldr	r2, [pc, #120]	; (80022ec <HAL_TIM_PWM_Start+0x138>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d107      	bne.n	8002286 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002284:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a18      	ldr	r2, [pc, #96]	; (80022ec <HAL_TIM_PWM_Start+0x138>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d00e      	beq.n	80022ae <HAL_TIM_PWM_Start+0xfa>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002298:	d009      	beq.n	80022ae <HAL_TIM_PWM_Start+0xfa>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <HAL_TIM_PWM_Start+0x13c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d004      	beq.n	80022ae <HAL_TIM_PWM_Start+0xfa>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <HAL_TIM_PWM_Start+0x140>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d111      	bne.n	80022d2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b06      	cmp	r3, #6
 80022be:	d010      	beq.n	80022e2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d0:	e007      	b.n	80022e2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0201 	orr.w	r2, r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40012c00 	.word	0x40012c00
 80022f0:	40000400 	.word	0x40000400
 80022f4:	40000800 	.word	0x40000800

080022f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2200      	movs	r2, #0
 8002308:	6839      	ldr	r1, [r7, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fd8e 	bl	8002e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a29      	ldr	r2, [pc, #164]	; (80023bc <HAL_TIM_PWM_Stop+0xc4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d117      	bne.n	800234a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6a1a      	ldr	r2, [r3, #32]
 8002320:	f241 1311 	movw	r3, #4369	; 0x1111
 8002324:	4013      	ands	r3, r2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10f      	bne.n	800234a <HAL_TIM_PWM_Stop+0x52>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a1a      	ldr	r2, [r3, #32]
 8002330:	f240 4344 	movw	r3, #1092	; 0x444
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d107      	bne.n	800234a <HAL_TIM_PWM_Stop+0x52>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002348:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6a1a      	ldr	r2, [r3, #32]
 8002350:	f241 1311 	movw	r3, #4369	; 0x1111
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10f      	bne.n	800237a <HAL_TIM_PWM_Stop+0x82>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	f240 4344 	movw	r3, #1092	; 0x444
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d107      	bne.n	800237a <HAL_TIM_PWM_Stop+0x82>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d104      	bne.n	800238a <HAL_TIM_PWM_Stop+0x92>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002388:	e013      	b.n	80023b2 <HAL_TIM_PWM_Stop+0xba>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b04      	cmp	r3, #4
 800238e:	d104      	bne.n	800239a <HAL_TIM_PWM_Stop+0xa2>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002398:	e00b      	b.n	80023b2 <HAL_TIM_PWM_Stop+0xba>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b08      	cmp	r3, #8
 800239e:	d104      	bne.n	80023aa <HAL_TIM_PWM_Stop+0xb2>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023a8:	e003      	b.n	80023b2 <HAL_TIM_PWM_Stop+0xba>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40012c00 	.word	0x40012c00

080023c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d122      	bne.n	800241c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d11b      	bne.n	800241c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0202 	mvn.w	r2, #2
 80023ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 fa76 	bl	80028f4 <HAL_TIM_IC_CaptureCallback>
 8002408:	e005      	b.n	8002416 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fa69 	bl	80028e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 fa78 	bl	8002906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b04      	cmp	r3, #4
 8002428:	d122      	bne.n	8002470 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b04      	cmp	r3, #4
 8002436:	d11b      	bne.n	8002470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0204 	mvn.w	r2, #4
 8002440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fa4c 	bl	80028f4 <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fa3f 	bl	80028e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fa4e 	bl	8002906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b08      	cmp	r3, #8
 800247c:	d122      	bne.n	80024c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b08      	cmp	r3, #8
 800248a:	d11b      	bne.n	80024c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0208 	mvn.w	r2, #8
 8002494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2204      	movs	r2, #4
 800249a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fa22 	bl	80028f4 <HAL_TIM_IC_CaptureCallback>
 80024b0:	e005      	b.n	80024be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fa15 	bl	80028e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 fa24 	bl	8002906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d122      	bne.n	8002518 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	2b10      	cmp	r3, #16
 80024de:	d11b      	bne.n	8002518 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0210 	mvn.w	r2, #16
 80024e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2208      	movs	r2, #8
 80024ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f9f8 	bl	80028f4 <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f9eb 	bl	80028e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f9fa 	bl	8002906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b01      	cmp	r3, #1
 8002524:	d10e      	bne.n	8002544 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b01      	cmp	r3, #1
 8002532:	d107      	bne.n	8002544 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0201 	mvn.w	r2, #1
 800253c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7fd ffe2 	bl	8000508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254e:	2b80      	cmp	r3, #128	; 0x80
 8002550:	d10e      	bne.n	8002570 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255c:	2b80      	cmp	r3, #128	; 0x80
 800255e:	d107      	bne.n	8002570 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fd3a 	bl	8002fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b40      	cmp	r3, #64	; 0x40
 800257c:	d10e      	bne.n	800259c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002588:	2b40      	cmp	r3, #64	; 0x40
 800258a:	d107      	bne.n	800259c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f9be 	bl	8002918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0320 	and.w	r3, r3, #32
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	d10e      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d107      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0220 	mvn.w	r2, #32
 80025c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fd05 	bl	8002fd2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e0ae      	b.n	800274c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b0c      	cmp	r3, #12
 80025fa:	f200 809f 	bhi.w	800273c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025fe:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	08002639 	.word	0x08002639
 8002608:	0800273d 	.word	0x0800273d
 800260c:	0800273d 	.word	0x0800273d
 8002610:	0800273d 	.word	0x0800273d
 8002614:	08002679 	.word	0x08002679
 8002618:	0800273d 	.word	0x0800273d
 800261c:	0800273d 	.word	0x0800273d
 8002620:	0800273d 	.word	0x0800273d
 8002624:	080026bb 	.word	0x080026bb
 8002628:	0800273d 	.word	0x0800273d
 800262c:	0800273d 	.word	0x0800273d
 8002630:	0800273d 	.word	0x0800273d
 8002634:	080026fb 	.word	0x080026fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	4618      	mov	r0, r3
 8002640:	f000 f9d6 	bl	80029f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0208 	orr.w	r2, r2, #8
 8002652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0204 	bic.w	r2, r2, #4
 8002662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6999      	ldr	r1, [r3, #24]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	619a      	str	r2, [r3, #24]
      break;
 8002676:	e064      	b.n	8002742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fa1c 	bl	8002abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6999      	ldr	r1, [r3, #24]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	021a      	lsls	r2, r3, #8
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	619a      	str	r2, [r3, #24]
      break;
 80026b8:	e043      	b.n	8002742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f000 fa65 	bl	8002b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0208 	orr.w	r2, r2, #8
 80026d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0204 	bic.w	r2, r2, #4
 80026e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69d9      	ldr	r1, [r3, #28]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	61da      	str	r2, [r3, #28]
      break;
 80026f8:	e023      	b.n	8002742 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 faaf 	bl	8002c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69da      	ldr	r2, [r3, #28]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69d9      	ldr	r1, [r3, #28]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	021a      	lsls	r2, r3, #8
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	61da      	str	r2, [r3, #28]
      break;
 800273a:	e002      	b.n	8002742 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	75fb      	strb	r3, [r7, #23]
      break;
 8002740:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800274a:	7dfb      	ldrb	r3, [r7, #23]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_TIM_ConfigClockSource+0x1c>
 800276c:	2302      	movs	r3, #2
 800276e:	e0b4      	b.n	80028da <HAL_TIM_ConfigClockSource+0x186>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800278e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002796:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a8:	d03e      	beq.n	8002828 <HAL_TIM_ConfigClockSource+0xd4>
 80027aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ae:	f200 8087 	bhi.w	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
 80027b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b6:	f000 8086 	beq.w	80028c6 <HAL_TIM_ConfigClockSource+0x172>
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027be:	d87f      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
 80027c0:	2b70      	cmp	r3, #112	; 0x70
 80027c2:	d01a      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0xa6>
 80027c4:	2b70      	cmp	r3, #112	; 0x70
 80027c6:	d87b      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
 80027c8:	2b60      	cmp	r3, #96	; 0x60
 80027ca:	d050      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x11a>
 80027cc:	2b60      	cmp	r3, #96	; 0x60
 80027ce:	d877      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
 80027d0:	2b50      	cmp	r3, #80	; 0x50
 80027d2:	d03c      	beq.n	800284e <HAL_TIM_ConfigClockSource+0xfa>
 80027d4:	2b50      	cmp	r3, #80	; 0x50
 80027d6:	d873      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
 80027d8:	2b40      	cmp	r3, #64	; 0x40
 80027da:	d058      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x13a>
 80027dc:	2b40      	cmp	r3, #64	; 0x40
 80027de:	d86f      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
 80027e0:	2b30      	cmp	r3, #48	; 0x30
 80027e2:	d064      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x15a>
 80027e4:	2b30      	cmp	r3, #48	; 0x30
 80027e6:	d86b      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d060      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x15a>
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d867      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d05c      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x15a>
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d05a      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x15a>
 80027f8:	e062      	b.n	80028c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6899      	ldr	r1, [r3, #8]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f000 faf0 	bl	8002dee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800281c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	609a      	str	r2, [r3, #8]
      break;
 8002826:	e04f      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6899      	ldr	r1, [r3, #8]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f000 fad9 	bl	8002dee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800284a:	609a      	str	r2, [r3, #8]
      break;
 800284c:	e03c      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6859      	ldr	r1, [r3, #4]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	461a      	mov	r2, r3
 800285c:	f000 fa50 	bl	8002d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2150      	movs	r1, #80	; 0x50
 8002866:	4618      	mov	r0, r3
 8002868:	f000 faa7 	bl	8002dba <TIM_ITRx_SetConfig>
      break;
 800286c:	e02c      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	461a      	mov	r2, r3
 800287c:	f000 fa6e 	bl	8002d5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2160      	movs	r1, #96	; 0x60
 8002886:	4618      	mov	r0, r3
 8002888:	f000 fa97 	bl	8002dba <TIM_ITRx_SetConfig>
      break;
 800288c:	e01c      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6859      	ldr	r1, [r3, #4]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	461a      	mov	r2, r3
 800289c:	f000 fa30 	bl	8002d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2140      	movs	r1, #64	; 0x40
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fa87 	bl	8002dba <TIM_ITRx_SetConfig>
      break;
 80028ac:	e00c      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f000 fa7e 	bl	8002dba <TIM_ITRx_SetConfig>
      break;
 80028be:	e003      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
      break;
 80028c4:	e000      	b.n	80028c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
	...

0800292c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a29      	ldr	r2, [pc, #164]	; (80029e4 <TIM_Base_SetConfig+0xb8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00b      	beq.n	800295c <TIM_Base_SetConfig+0x30>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294a:	d007      	beq.n	800295c <TIM_Base_SetConfig+0x30>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a26      	ldr	r2, [pc, #152]	; (80029e8 <TIM_Base_SetConfig+0xbc>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d003      	beq.n	800295c <TIM_Base_SetConfig+0x30>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a25      	ldr	r2, [pc, #148]	; (80029ec <TIM_Base_SetConfig+0xc0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d108      	bne.n	800296e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a1c      	ldr	r2, [pc, #112]	; (80029e4 <TIM_Base_SetConfig+0xb8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00b      	beq.n	800298e <TIM_Base_SetConfig+0x62>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297c:	d007      	beq.n	800298e <TIM_Base_SetConfig+0x62>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a19      	ldr	r2, [pc, #100]	; (80029e8 <TIM_Base_SetConfig+0xbc>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d003      	beq.n	800298e <TIM_Base_SetConfig+0x62>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a18      	ldr	r2, [pc, #96]	; (80029ec <TIM_Base_SetConfig+0xc0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d108      	bne.n	80029a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <TIM_Base_SetConfig+0xb8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d103      	bne.n	80029d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	615a      	str	r2, [r3, #20]
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	40012c00 	.word	0x40012c00
 80029e8:	40000400 	.word	0x40000400
 80029ec:	40000800 	.word	0x40000800

080029f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f023 0201 	bic.w	r2, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0303 	bic.w	r3, r3, #3
 8002a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f023 0302 	bic.w	r3, r3, #2
 8002a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <TIM_OC1_SetConfig+0xc8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d10c      	bne.n	8002a66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f023 0308 	bic.w	r3, r3, #8
 8002a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f023 0304 	bic.w	r3, r3, #4
 8002a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a13      	ldr	r2, [pc, #76]	; (8002ab8 <TIM_OC1_SetConfig+0xc8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d111      	bne.n	8002a92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	621a      	str	r2, [r3, #32]
}
 8002aac:	bf00      	nop
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40012c00 	.word	0x40012c00

08002abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	f023 0210 	bic.w	r2, r3, #16
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0320 	bic.w	r3, r3, #32
 8002b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <TIM_OC2_SetConfig+0xd0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d10d      	bne.n	8002b38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <TIM_OC2_SetConfig+0xd0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d113      	bne.n	8002b68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	621a      	str	r2, [r3, #32]
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr
 8002b8c:	40012c00 	.word	0x40012c00

08002b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0303 	bic.w	r3, r3, #3
 8002bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <TIM_OC3_SetConfig+0xd0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d10d      	bne.n	8002c0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <TIM_OC3_SetConfig+0xd0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d113      	bne.n	8002c3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	621a      	str	r2, [r3, #32]
}
 8002c54:	bf00      	nop
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40012c00 	.word	0x40012c00

08002c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	031b      	lsls	r3, r3, #12
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a0f      	ldr	r2, [pc, #60]	; (8002cfc <TIM_OC4_SetConfig+0x98>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d109      	bne.n	8002cd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	019b      	lsls	r3, r3, #6
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	621a      	str	r2, [r3, #32]
}
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	40012c00 	.word	0x40012c00

08002d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	f023 0201 	bic.w	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f023 030a 	bic.w	r3, r3, #10
 8002d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	621a      	str	r2, [r3, #32]
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f023 0210 	bic.w	r2, r3, #16
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	031b      	lsls	r3, r3, #12
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	621a      	str	r2, [r3, #32]
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b085      	sub	sp, #20
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f043 0307 	orr.w	r3, r3, #7
 8002ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	609a      	str	r2, [r3, #8]
}
 8002de4:	bf00      	nop
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b087      	sub	sp, #28
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	021a      	lsls	r2, r3, #8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	609a      	str	r2, [r3, #8]
}
 8002e22:	bf00      	nop
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	2201      	movs	r2, #1
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a1a      	ldr	r2, [r3, #32]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	401a      	ands	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a1a      	ldr	r2, [r3, #32]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	431a      	orrs	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	621a      	str	r2, [r3, #32]
}
 8002e6a:	bf00      	nop
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e046      	b.n	8002f1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a16      	ldr	r2, [pc, #88]	; (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00e      	beq.n	8002eee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed8:	d009      	beq.n	8002eee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d004      	beq.n	8002eee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a10      	ldr	r2, [pc, #64]	; (8002f2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d10c      	bne.n	8002f08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	40012c00 	.word	0x40012c00
 8002f28:	40000400 	.word	0x40000400
 8002f2c:	40000800 	.word	0x40000800

08002f30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e03d      	b.n	8002fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e042      	b.n	800308e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d106      	bne.n	8003022 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7fd ff41 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2224      	movs	r2, #36	; 0x24
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003038:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fdc6 	bl	8003bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800304e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800305e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800306e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b08a      	sub	sp, #40	; 0x28
 800309a:	af02      	add	r7, sp, #8
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	4613      	mov	r3, r2
 80030a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	d16d      	bne.n	8003192 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <HAL_UART_Transmit+0x2c>
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e066      	b.n	8003194 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2221      	movs	r2, #33	; 0x21
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030d4:	f7fd ffb8 	bl	8001048 <HAL_GetTick>
 80030d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	88fa      	ldrh	r2, [r7, #6]
 80030de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	88fa      	ldrh	r2, [r7, #6]
 80030e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ee:	d108      	bne.n	8003102 <HAL_UART_Transmit+0x6c>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	e003      	b.n	800310a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800310a:	e02a      	b.n	8003162 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2200      	movs	r2, #0
 8003114:	2180      	movs	r1, #128	; 0x80
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fb15 	bl	8003746 <UART_WaitOnFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e036      	b.n	8003194 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10b      	bne.n	8003144 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800313a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	3302      	adds	r3, #2
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	e007      	b.n	8003154 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	781a      	ldrb	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3301      	adds	r3, #1
 8003152:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1cf      	bne.n	800310c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2200      	movs	r2, #0
 8003174:	2140      	movs	r1, #64	; 0x40
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fae5 	bl	8003746 <UART_WaitOnFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e006      	b.n	8003194 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e000      	b.n	8003194 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003192:	2302      	movs	r3, #2
  }
}
 8003194:	4618      	mov	r0, r3
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d112      	bne.n	80031dc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_UART_Receive_IT+0x26>
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e00b      	b.n	80031de <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	461a      	mov	r2, r3
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fb25 	bl	8003822 <UART_Start_Receive_IT>
 80031d8:	4603      	mov	r3, r0
 80031da:	e000      	b.n	80031de <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80031dc:	2302      	movs	r3, #2
  }
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b0ba      	sub	sp, #232	; 0xe8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003214:	2300      	movs	r3, #0
 8003216:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800321a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10f      	bne.n	800324e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800322e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_UART_IRQHandler+0x66>
 800323a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fc01 	bl	8003a4e <UART_Receive_IT>
      return;
 800324c:	e25b      	b.n	8003706 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800324e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80de 	beq.w	8003414 <HAL_UART_IRQHandler+0x22c>
 8003258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003268:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80d1 	beq.w	8003414 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <HAL_UART_IRQHandler+0xae>
 800327e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f043 0201 	orr.w	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <HAL_UART_IRQHandler+0xd2>
 80032a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d005      	beq.n	80032ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f043 0202 	orr.w	r2, r3, #2
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00b      	beq.n	80032de <HAL_UART_IRQHandler+0xf6>
 80032c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	f043 0204 	orr.w	r2, r3, #4
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d011      	beq.n	800330e <HAL_UART_IRQHandler+0x126>
 80032ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d105      	bne.n	8003302 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	f043 0208 	orr.w	r2, r3, #8
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 81f2 	beq.w	80036fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_UART_IRQHandler+0x14e>
 8003324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fb8c 	bl	8003a4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_UART_IRQHandler+0x17a>
 800335a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d04f      	beq.n	8003402 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fa96 	bl	8003894 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b00      	cmp	r3, #0
 8003374:	d041      	beq.n	80033fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3314      	adds	r3, #20
 800337c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003384:	e853 3f00 	ldrex	r3, [r3]
 8003388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800338c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003394:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3314      	adds	r3, #20
 800339e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033b2:	e841 2300 	strex	r3, r2, [r1]
 80033b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80033ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1d9      	bne.n	8003376 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d013      	beq.n	80033f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ce:	4a7e      	ldr	r2, [pc, #504]	; (80035c8 <HAL_UART_IRQHandler+0x3e0>)
 80033d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd ff88 	bl	80012ec <HAL_DMA_Abort_IT>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d016      	beq.n	8003410 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033ec:	4610      	mov	r0, r2
 80033ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f0:	e00e      	b.n	8003410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f993 	bl	800371e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f8:	e00a      	b.n	8003410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f98f 	bl	800371e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003400:	e006      	b.n	8003410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f98b 	bl	800371e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800340e:	e175      	b.n	80036fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003410:	bf00      	nop
    return;
 8003412:	e173      	b.n	80036fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	2b01      	cmp	r3, #1
 800341a:	f040 814f 	bne.w	80036bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800341e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 8148 	beq.w	80036bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800342c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8141 	beq.w	80036bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800343a:	2300      	movs	r3, #0
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80b6 	beq.w	80035cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800346c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8145 	beq.w	8003700 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800347a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800347e:	429a      	cmp	r2, r3
 8003480:	f080 813e 	bcs.w	8003700 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800348a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b20      	cmp	r3, #32
 8003494:	f000 8088 	beq.w	80035a8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80034c4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1d9      	bne.n	8003498 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3314      	adds	r3, #20
 80034ea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ee:	e853 3f00 	ldrex	r3, [r3]
 80034f2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3314      	adds	r3, #20
 8003504:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003508:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800350c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003510:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800351a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e1      	bne.n	80034e4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3314      	adds	r3, #20
 8003526:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800352a:	e853 3f00 	ldrex	r3, [r3]
 800352e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003536:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3314      	adds	r3, #20
 8003540:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003544:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003546:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003548:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800354a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800354c:	e841 2300 	strex	r3, r2, [r1]
 8003550:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003552:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1e3      	bne.n	8003520 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	330c      	adds	r3, #12
 800356c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003578:	f023 0310 	bic.w	r3, r3, #16
 800357c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800358a:	65ba      	str	r2, [r7, #88]	; 0x58
 800358c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003590:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003592:	e841 2300 	strex	r3, r2, [r1]
 8003596:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1e3      	bne.n	8003566 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fd fe67 	bl	8001276 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8b6 	bl	8003730 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035c4:	e09c      	b.n	8003700 <HAL_UART_IRQHandler+0x518>
 80035c6:	bf00      	nop
 80035c8:	08003959 	.word	0x08003959
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 808e 	beq.w	8003704 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80035e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8089 	beq.w	8003704 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	330c      	adds	r3, #12
 80035f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003604:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003608:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	330c      	adds	r3, #12
 8003612:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003616:	647a      	str	r2, [r7, #68]	; 0x44
 8003618:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800361c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1e3      	bne.n	80035f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3314      	adds	r3, #20
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	623b      	str	r3, [r7, #32]
   return(result);
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3314      	adds	r3, #20
 800364a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800364e:	633a      	str	r2, [r7, #48]	; 0x30
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e3      	bne.n	800362a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	330c      	adds	r3, #12
 8003676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0310 	bic.w	r3, r3, #16
 8003686:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	330c      	adds	r3, #12
 8003690:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003694:	61fa      	str	r2, [r7, #28]
 8003696:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003698:	69b9      	ldr	r1, [r7, #24]
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	e841 2300 	strex	r3, r2, [r1]
 80036a0:	617b      	str	r3, [r7, #20]
   return(result);
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e3      	bne.n	8003670 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036b2:	4619      	mov	r1, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f83b 	bl	8003730 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036ba:	e023      	b.n	8003704 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d009      	beq.n	80036dc <HAL_UART_IRQHandler+0x4f4>
 80036c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f953 	bl	8003980 <UART_Transmit_IT>
    return;
 80036da:	e014      	b.n	8003706 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00e      	beq.n	8003706 <HAL_UART_IRQHandler+0x51e>
 80036e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f992 	bl	8003a1e <UART_EndTransmit_IT>
    return;
 80036fa:	e004      	b.n	8003706 <HAL_UART_IRQHandler+0x51e>
    return;
 80036fc:	bf00      	nop
 80036fe:	e002      	b.n	8003706 <HAL_UART_IRQHandler+0x51e>
      return;
 8003700:	bf00      	nop
 8003702:	e000      	b.n	8003706 <HAL_UART_IRQHandler+0x51e>
      return;
 8003704:	bf00      	nop
  }
}
 8003706:	37e8      	adds	r7, #232	; 0xe8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr

08003746 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b090      	sub	sp, #64	; 0x40
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003756:	e050      	b.n	80037fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375e:	d04c      	beq.n	80037fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <UART_WaitOnFlagUntilTimeout+0x30>
 8003766:	f7fd fc6f 	bl	8001048 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003772:	429a      	cmp	r2, r3
 8003774:	d241      	bcs.n	80037fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	330c      	adds	r3, #12
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800378c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	330c      	adds	r3, #12
 8003794:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003796:	637a      	str	r2, [r7, #52]	; 0x34
 8003798:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800379c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e5      	bne.n	8003776 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3314      	adds	r3, #20
 80037b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	613b      	str	r3, [r7, #16]
   return(result);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3314      	adds	r3, #20
 80037c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ca:	623a      	str	r2, [r7, #32]
 80037cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	69f9      	ldr	r1, [r7, #28]
 80037d0:	6a3a      	ldr	r2, [r7, #32]
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e5      	bne.n	80037aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e00f      	b.n	800381a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4013      	ands	r3, r2
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	429a      	cmp	r2, r3
 8003808:	bf0c      	ite	eq
 800380a:	2301      	moveq	r3, #1
 800380c:	2300      	movne	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	429a      	cmp	r2, r3
 8003816:	d09f      	beq.n	8003758 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3740      	adds	r7, #64	; 0x40
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	4613      	mov	r3, r2
 800382e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	88fa      	ldrh	r2, [r7, #6]
 800383a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	88fa      	ldrh	r2, [r7, #6]
 8003840:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2222      	movs	r2, #34	; 0x22
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d007      	beq.n	8003868 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003866:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0220 	orr.w	r2, r2, #32
 8003886:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003894:	b480      	push	{r7}
 8003896:	b095      	sub	sp, #84	; 0x54
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	330c      	adds	r3, #12
 80038ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038bc:	643a      	str	r2, [r7, #64]	; 0x40
 80038be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e5      	bne.n	800389c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3314      	adds	r3, #20
 80038d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	61fb      	str	r3, [r7, #28]
   return(result);
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3314      	adds	r3, #20
 80038ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e5      	bne.n	80038d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	2b01      	cmp	r3, #1
 800390a:	d119      	bne.n	8003940 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	330c      	adds	r3, #12
 8003912:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	e853 3f00 	ldrex	r3, [r3]
 800391a:	60bb      	str	r3, [r7, #8]
   return(result);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f023 0310 	bic.w	r3, r3, #16
 8003922:	647b      	str	r3, [r7, #68]	; 0x44
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	330c      	adds	r3, #12
 800392a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800392c:	61ba      	str	r2, [r7, #24]
 800392e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	6979      	ldr	r1, [r7, #20]
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	613b      	str	r3, [r7, #16]
   return(result);
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e5      	bne.n	800390c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800394e:	bf00      	nop
 8003950:	3754      	adds	r7, #84	; 0x54
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f7ff fed3 	bl	800371e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b21      	cmp	r3, #33	; 0x21
 8003992:	d13e      	bne.n	8003a12 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399c:	d114      	bne.n	80039c8 <UART_Transmit_IT+0x48>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d110      	bne.n	80039c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	1c9a      	adds	r2, r3, #2
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	621a      	str	r2, [r3, #32]
 80039c6:	e008      	b.n	80039da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	1c59      	adds	r1, r3, #1
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6211      	str	r1, [r2, #32]
 80039d2:	781a      	ldrb	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	4619      	mov	r1, r3
 80039e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10f      	bne.n	8003a0e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e000      	b.n	8003a14 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
  }
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr

08003a1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff fe64 	bl	800370c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b08c      	sub	sp, #48	; 0x30
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b22      	cmp	r3, #34	; 0x22
 8003a60:	f040 80ae 	bne.w	8003bc0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6c:	d117      	bne.n	8003a9e <UART_Receive_IT+0x50>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d113      	bne.n	8003a9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	1c9a      	adds	r2, r3, #2
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a9c:	e026      	b.n	8003aec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab0:	d007      	beq.n	8003ac2 <UART_Receive_IT+0x74>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <UART_Receive_IT+0x82>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e008      	b.n	8003ae2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	4619      	mov	r1, r3
 8003afa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d15d      	bne.n	8003bbc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0220 	bic.w	r2, r2, #32
 8003b0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0201 	bic.w	r2, r2, #1
 8003b2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d135      	bne.n	8003bb2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f023 0310 	bic.w	r3, r3, #16
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	623a      	str	r2, [r7, #32]
 8003b6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	69f9      	ldr	r1, [r7, #28]
 8003b72:	6a3a      	ldr	r2, [r7, #32]
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e5      	bne.n	8003b4c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d10a      	bne.n	8003ba4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff fdc0 	bl	8003730 <HAL_UARTEx_RxEventCallback>
 8003bb0:	e002      	b.n	8003bb8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fc fd6c 	bl	8000690 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e002      	b.n	8003bc2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e000      	b.n	8003bc2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003bc0:	2302      	movs	r3, #2
  }
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3730      	adds	r7, #48	; 0x30
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c06:	f023 030c 	bic.w	r3, r3, #12
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	430b      	orrs	r3, r1
 8003c12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2c      	ldr	r2, [pc, #176]	; (8003ce0 <UART_SetConfig+0x114>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d103      	bne.n	8003c3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c34:	f7fe f964 	bl	8001f00 <HAL_RCC_GetPCLK2Freq>
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	e002      	b.n	8003c42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c3c:	f7fe f94c 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8003c40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	009a      	lsls	r2, r3, #2
 8003c4c:	441a      	add	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	4a22      	ldr	r2, [pc, #136]	; (8003ce4 <UART_SetConfig+0x118>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	0119      	lsls	r1, r3, #4
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	009a      	lsls	r2, r3, #2
 8003c6c:	441a      	add	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c78:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <UART_SetConfig+0x118>)
 8003c7a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	2064      	movs	r0, #100	; 0x64
 8003c82:	fb00 f303 	mul.w	r3, r0, r3
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	3332      	adds	r3, #50	; 0x32
 8003c8c:	4a15      	ldr	r2, [pc, #84]	; (8003ce4 <UART_SetConfig+0x118>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c98:	4419      	add	r1, r3
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009a      	lsls	r2, r3, #2
 8003ca4:	441a      	add	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <UART_SetConfig+0x118>)
 8003cb2:	fba3 0302 	umull	r0, r3, r3, r2
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2064      	movs	r0, #100	; 0x64
 8003cba:	fb00 f303 	mul.w	r3, r0, r3
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	3332      	adds	r3, #50	; 0x32
 8003cc4:	4a07      	ldr	r2, [pc, #28]	; (8003ce4 <UART_SetConfig+0x118>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	f003 020f 	and.w	r2, r3, #15
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	440a      	add	r2, r1
 8003cd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40013800 	.word	0x40013800
 8003ce4:	51eb851f 	.word	0x51eb851f

08003ce8 <int_to_str>:
 */

#include "INT_TO_STR.h"


void int_to_str(int num, char str[]) {
 8003ce8:	b480      	push	{r7}
 8003cea:	b089      	sub	sp, #36	; 0x24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
	int i = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]

	// En caso de ser cero retornamos cero
	if (num == 0) {
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d127      	bne.n	8003d4c <int_to_str+0x64>
		str[0] = '0';
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2230      	movs	r2, #48	; 0x30
 8003d00:	701a      	strb	r2, [r3, #0]
		str[1] = '\0';
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	3301      	adds	r3, #1
 8003d06:	2200      	movs	r2, #0
 8003d08:	701a      	strb	r2, [r3, #0]
		return;
 8003d0a:	e04a      	b.n	8003da2 <int_to_str+0xba>
	}

	// Procesamos cada numero
	while (num != 0) {
		int rem = num % 10;
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4b27      	ldr	r3, [pc, #156]	; (8003dac <int_to_str+0xc4>)
 8003d10:	fb83 1302 	smull	r1, r3, r3, r2
 8003d14:	1099      	asrs	r1, r3, #2
 8003d16:	17d3      	asrs	r3, r2, #31
 8003d18:	1ac9      	subs	r1, r1, r3
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	60fb      	str	r3, [r7, #12]
		str[i++] = rem + '0';
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	1c59      	adds	r1, r3, #1
 8003d2e:	61f9      	str	r1, [r7, #28]
 8003d30:	4619      	mov	r1, r3
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	440b      	add	r3, r1
 8003d36:	3230      	adds	r2, #48	; 0x30
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	701a      	strb	r2, [r3, #0]
		num = num / 10;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a1b      	ldr	r2, [pc, #108]	; (8003dac <int_to_str+0xc4>)
 8003d40:	fb82 1203 	smull	r1, r2, r2, r3
 8003d44:	1092      	asrs	r2, r2, #2
 8003d46:	17db      	asrs	r3, r3, #31
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	607b      	str	r3, [r7, #4]
	while (num != 0) {
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1dc      	bne.n	8003d0c <int_to_str+0x24>
	}

	// Colocamos al final el retorno
	str[i] = '\0';
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	4413      	add	r3, r2
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]

	// Invertimos la cadena
	int start = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61bb      	str	r3, [r7, #24]
	int end = i - 1;
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	617b      	str	r3, [r7, #20]
	while (start < end) {
 8003d66:	e017      	b.n	8003d98 <int_to_str+0xb0>
		char temp = str[start];
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	74fb      	strb	r3, [r7, #19]
		str[start] = str[end];
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	441a      	add	r2, r3
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	6839      	ldr	r1, [r7, #0]
 8003d7c:	440b      	add	r3, r1
 8003d7e:	7812      	ldrb	r2, [r2, #0]
 8003d80:	701a      	strb	r2, [r3, #0]
		str[end] = temp;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	4413      	add	r3, r2
 8003d88:	7cfa      	ldrb	r2, [r7, #19]
 8003d8a:	701a      	strb	r2, [r3, #0]
		start++;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	61bb      	str	r3, [r7, #24]
		end--;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	617b      	str	r3, [r7, #20]
	while (start < end) {
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	dbe3      	blt.n	8003d68 <int_to_str+0x80>
	}

	return;
 8003da0:	bf00      	nop
}
 8003da2:	3724      	adds	r7, #36	; 0x24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	66666667 	.word	0x66666667

08003db0 <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <DWT_Delay_us+0x48>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8003dbe:	f7fe f881 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <DWT_Delay_us+0x4c>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	0c9b      	lsrs	r3, r3, #18
 8003dcc:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8003dd8:	bf00      	nop
 8003dda:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <DWT_Delay_us+0x48>)
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad2      	subs	r2, r2, r3
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	1acb      	subs	r3, r1, r3
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d3f6      	bcc.n	8003dda <DWT_Delay_us+0x2a>
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	e0001000 	.word	0xe0001000
 8003dfc:	431bde83 	.word	0x431bde83

08003e00 <DWT_Delay_ms>:

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8003e08:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <DWT_Delay_ms+0x44>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8003e0e:	f7fe f859 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8003e12:	4603      	mov	r3, r0
 8003e14:	4a0c      	ldr	r2, [pc, #48]	; (8003e48 <DWT_Delay_ms+0x48>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	099b      	lsrs	r3, r3, #6
 8003e1c:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 8003e28:	bf00      	nop
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <DWT_Delay_ms+0x44>)
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad2      	subs	r2, r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d3f8      	bcc.n	8003e2a <DWT_Delay_ms+0x2a>
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	e0001000 	.word	0xe0001000
 8003e48:	10624dd3 	.word	0x10624dd3

08003e4c <LCD_msg>:
#include "../../util/DWT_Delay.h"


//-----[ Alphanumeric LCD 16x2 Routines ]-----
// Funcion para resumir 2 funciones en una
void LCD_msg(char str[], unsigned char row, unsigned char col) {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	70fb      	strb	r3, [r7, #3]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	70bb      	strb	r3, [r7, #2]
	LCD_Set_Cursor(row, col);
 8003e5c:	78ba      	ldrb	r2, [r7, #2]
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	4611      	mov	r1, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f8ab 	bl	8003fbe <LCD_Set_Cursor>
	LCD_Write_String(str);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fa33 	bl	80042d4 <LCD_Write_String>
	return;
 8003e6e:	bf00      	nop
}
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <LCD_DATA>:


void LCD_DATA(unsigned char Data)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	71fb      	strb	r3, [r7, #7]
    if(Data & 1)
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <LCD_DATA+0x26>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 1);
 8003e8c:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <LCD_DATA+0xc4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a2a      	ldr	r2, [pc, #168]	; (8003f3c <LCD_DATA+0xc4>)
 8003e92:	8891      	ldrh	r1, [r2, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd fc24 	bl	80016e4 <HAL_GPIO_WritePin>
 8003e9c:	e007      	b.n	8003eae <LCD_DATA+0x36>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 0);
 8003e9e:	4b27      	ldr	r3, [pc, #156]	; (8003f3c <LCD_DATA+0xc4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a26      	ldr	r2, [pc, #152]	; (8003f3c <LCD_DATA+0xc4>)
 8003ea4:	8891      	ldrh	r1, [r2, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fd fc1b 	bl	80016e4 <HAL_GPIO_WritePin>
    if(Data & 2)
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <LCD_DATA+0x52>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 1);
 8003eb8:	4b20      	ldr	r3, [pc, #128]	; (8003f3c <LCD_DATA+0xc4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1f      	ldr	r2, [pc, #124]	; (8003f3c <LCD_DATA+0xc4>)
 8003ebe:	88d1      	ldrh	r1, [r2, #6]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fd fc0e 	bl	80016e4 <HAL_GPIO_WritePin>
 8003ec8:	e007      	b.n	8003eda <LCD_DATA+0x62>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 0);
 8003eca:	4b1c      	ldr	r3, [pc, #112]	; (8003f3c <LCD_DATA+0xc4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1b      	ldr	r2, [pc, #108]	; (8003f3c <LCD_DATA+0xc4>)
 8003ed0:	88d1      	ldrh	r1, [r2, #6]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd fc05 	bl	80016e4 <HAL_GPIO_WritePin>
    if(Data & 4)
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <LCD_DATA+0x7e>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 1);
 8003ee4:	4b15      	ldr	r3, [pc, #84]	; (8003f3c <LCD_DATA+0xc4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <LCD_DATA+0xc4>)
 8003eea:	8911      	ldrh	r1, [r2, #8]
 8003eec:	2201      	movs	r2, #1
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd fbf8 	bl	80016e4 <HAL_GPIO_WritePin>
 8003ef4:	e007      	b.n	8003f06 <LCD_DATA+0x8e>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 0);
 8003ef6:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <LCD_DATA+0xc4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a10      	ldr	r2, [pc, #64]	; (8003f3c <LCD_DATA+0xc4>)
 8003efc:	8911      	ldrh	r1, [r2, #8]
 8003efe:	2200      	movs	r2, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fd fbef 	bl	80016e4 <HAL_GPIO_WritePin>
    if(Data & 8)
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <LCD_DATA+0xaa>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 1);
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <LCD_DATA+0xc4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <LCD_DATA+0xc4>)
 8003f16:	8951      	ldrh	r1, [r2, #10]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd fbe2 	bl	80016e4 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
}
 8003f20:	e007      	b.n	8003f32 <LCD_DATA+0xba>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <LCD_DATA+0xc4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a05      	ldr	r2, [pc, #20]	; (8003f3c <LCD_DATA+0xc4>)
 8003f28:	8951      	ldrh	r1, [r2, #10]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fd fbd9 	bl	80016e4 <HAL_GPIO_WritePin>
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	080046fc 	.word	0x080046fc

08003f40 <LCD_CMD>:
void LCD_CMD(unsigned char a_CMD)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	71fb      	strb	r3, [r7, #7]
    // Select Command Register
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 0);
 8003f4a:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <LCD_CMD+0x60>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a14      	ldr	r2, [pc, #80]	; (8003fa0 <LCD_CMD+0x60>)
 8003f50:	89d1      	ldrh	r1, [r2, #14]
 8003f52:	2200      	movs	r2, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fd fbc5 	bl	80016e4 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
    LCD_DATA(a_CMD);
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff8b 	bl	8003e78 <LCD_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <LCD_CMD+0x60>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a0e      	ldr	r2, [pc, #56]	; (8003fa0 <LCD_CMD+0x60>)
 8003f68:	8991      	ldrh	r1, [r2, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fd fbb9 	bl	80016e4 <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8003f72:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <LCD_CMD+0x60>)
 8003f74:	8a1b      	ldrh	r3, [r3, #16]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff ff1a 	bl	8003db0 <DWT_Delay_us>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8003f7c:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <LCD_CMD+0x60>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a07      	ldr	r2, [pc, #28]	; (8003fa0 <LCD_CMD+0x60>)
 8003f82:	8991      	ldrh	r1, [r2, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fd fbac 	bl	80016e4 <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <LCD_CMD+0x60>)
 8003f8e:	8a1b      	ldrh	r3, [r3, #16]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff0d 	bl	8003db0 <DWT_Delay_us>
}
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	080046fc 	.word	0x080046fc

08003fa4 <LCD_Clear>:
void LCD_Clear()
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
    LCD_CMD(0);
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f7ff ffc9 	bl	8003f40 <LCD_CMD>
    LCD_CMD(1);
 8003fae:	2001      	movs	r0, #1
 8003fb0:	f7ff ffc6 	bl	8003f40 <LCD_CMD>
    DWT_Delay_us(70);
 8003fb4:	2046      	movs	r0, #70	; 0x46
 8003fb6:	f7ff fefb 	bl	8003db0 <DWT_Delay_us>
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <LCD_Set_Cursor>:
void LCD_Set_Cursor(unsigned char r, unsigned char c)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	460a      	mov	r2, r1
 8003fc8:	71fb      	strb	r3, [r7, #7]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	71bb      	strb	r3, [r7, #6]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d111      	bne.n	8003ff8 <LCD_Set_Cursor+0x3a>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 8003fd4:	79bb      	ldrb	r3, [r7, #6]
 8003fd6:	337f      	adds	r3, #127	; 0x7f
 8003fd8:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	091b      	lsrs	r3, r3, #4
 8003fde:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 8003fe8:	7bbb      	ldrb	r3, [r7, #14]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff ffa8 	bl	8003f40 <LCD_CMD>
      LCD_CMD(Low4);
 8003ff0:	7b7b      	ldrb	r3, [r7, #13]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff ffa4 	bl	8003f40 <LCD_CMD>
    }
    if(r == 2)
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d111      	bne.n	8004022 <LCD_Set_Cursor+0x64>
    {
      Temp  = 0xC0 + c - 1;
 8003ffe:	79bb      	ldrb	r3, [r7, #6]
 8004000:	3b41      	subs	r3, #65	; 0x41
 8004002:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 8004012:	7bbb      	ldrb	r3, [r7, #14]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff ff93 	bl	8003f40 <LCD_CMD>
      LCD_CMD(Low4);
 800401a:	7b7b      	ldrb	r3, [r7, #13]
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff ff8f 	bl	8003f40 <LCD_CMD>
    }
    DWT_Delay_ms(2);
 8004022:	2002      	movs	r0, #2
 8004024:	f7ff feec 	bl	8003e00 <DWT_Delay_ms>
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <LCD_Init>:
void LCD_Init()
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004036:	f107 0310 	add.w	r3, r7, #16
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	609a      	str	r2, [r3, #8]
 8004042:	60da      	str	r2, [r3, #12]
	// Initialize The DWT Delay Function Which Will Be Used Later On
	DWT_Delay_Init();
 8004044:	f000 fad0 	bl	80045e8 <DWT_Delay_Init>
    // IO Pin Configurations
	if(LCD16x2_CfgParam.LCD_GPIO == GPIOA)
 8004048:	4b6f      	ldr	r3, [pc, #444]	; (8004208 <LCD_Init+0x1d8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6f      	ldr	r2, [pc, #444]	; (800420c <LCD_Init+0x1dc>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d10c      	bne.n	800406c <LCD_Init+0x3c>
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004052:	4b6f      	ldr	r3, [pc, #444]	; (8004210 <LCD_Init+0x1e0>)
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	4a6e      	ldr	r2, [pc, #440]	; (8004210 <LCD_Init+0x1e0>)
 8004058:	f043 0304 	orr.w	r3, r3, #4
 800405c:	6193      	str	r3, [r2, #24]
 800405e:	4b6c      	ldr	r3, [pc, #432]	; (8004210 <LCD_Init+0x1e0>)
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	e034      	b.n	80040d6 <LCD_Init+0xa6>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOB)
 800406c:	4b66      	ldr	r3, [pc, #408]	; (8004208 <LCD_Init+0x1d8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a68      	ldr	r2, [pc, #416]	; (8004214 <LCD_Init+0x1e4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d10c      	bne.n	8004090 <LCD_Init+0x60>
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004076:	4b66      	ldr	r3, [pc, #408]	; (8004210 <LCD_Init+0x1e0>)
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	4a65      	ldr	r2, [pc, #404]	; (8004210 <LCD_Init+0x1e0>)
 800407c:	f043 0308 	orr.w	r3, r3, #8
 8004080:	6193      	str	r3, [r2, #24]
 8004082:	4b63      	ldr	r3, [pc, #396]	; (8004210 <LCD_Init+0x1e0>)
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	e022      	b.n	80040d6 <LCD_Init+0xa6>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOC)
 8004090:	4b5d      	ldr	r3, [pc, #372]	; (8004208 <LCD_Init+0x1d8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a60      	ldr	r2, [pc, #384]	; (8004218 <LCD_Init+0x1e8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d10c      	bne.n	80040b4 <LCD_Init+0x84>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800409a:	4b5d      	ldr	r3, [pc, #372]	; (8004210 <LCD_Init+0x1e0>)
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	4a5c      	ldr	r2, [pc, #368]	; (8004210 <LCD_Init+0x1e0>)
 80040a0:	f043 0310 	orr.w	r3, r3, #16
 80040a4:	6193      	str	r3, [r2, #24]
 80040a6:	4b5a      	ldr	r3, [pc, #360]	; (8004210 <LCD_Init+0x1e0>)
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	607b      	str	r3, [r7, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	e010      	b.n	80040d6 <LCD_Init+0xa6>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOD)
 80040b4:	4b54      	ldr	r3, [pc, #336]	; (8004208 <LCD_Init+0x1d8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a58      	ldr	r2, [pc, #352]	; (800421c <LCD_Init+0x1ec>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d10b      	bne.n	80040d6 <LCD_Init+0xa6>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80040be:	4b54      	ldr	r3, [pc, #336]	; (8004210 <LCD_Init+0x1e0>)
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	4a53      	ldr	r2, [pc, #332]	; (8004210 <LCD_Init+0x1e0>)
 80040c4:	f043 0320 	orr.w	r3, r3, #32
 80040c8:	6193      	str	r3, [r2, #24]
 80040ca:	4b51      	ldr	r3, [pc, #324]	; (8004210 <LCD_Init+0x1e0>)
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, GPIO_PIN_RESET);
 80040d6:	4b4c      	ldr	r3, [pc, #304]	; (8004208 <LCD_Init+0x1d8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a4b      	ldr	r2, [pc, #300]	; (8004208 <LCD_Init+0x1d8>)
 80040dc:	8891      	ldrh	r1, [r2, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fd faff 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, GPIO_PIN_RESET);
 80040e6:	4b48      	ldr	r3, [pc, #288]	; (8004208 <LCD_Init+0x1d8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a47      	ldr	r2, [pc, #284]	; (8004208 <LCD_Init+0x1d8>)
 80040ec:	88d1      	ldrh	r1, [r2, #6]
 80040ee:	2200      	movs	r2, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fd faf7 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, GPIO_PIN_RESET);
 80040f6:	4b44      	ldr	r3, [pc, #272]	; (8004208 <LCD_Init+0x1d8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a43      	ldr	r2, [pc, #268]	; (8004208 <LCD_Init+0x1d8>)
 80040fc:	8911      	ldrh	r1, [r2, #8]
 80040fe:	2200      	movs	r2, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f7fd faef 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, GPIO_PIN_RESET);
 8004106:	4b40      	ldr	r3, [pc, #256]	; (8004208 <LCD_Init+0x1d8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a3f      	ldr	r2, [pc, #252]	; (8004208 <LCD_Init+0x1d8>)
 800410c:	8951      	ldrh	r1, [r2, #10]
 800410e:	2200      	movs	r2, #0
 8004110:	4618      	mov	r0, r3
 8004112:	f7fd fae7 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 8004116:	4b3c      	ldr	r3, [pc, #240]	; (8004208 <LCD_Init+0x1d8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a3b      	ldr	r2, [pc, #236]	; (8004208 <LCD_Init+0x1d8>)
 800411c:	89d1      	ldrh	r1, [r2, #14]
 800411e:	2200      	movs	r2, #0
 8004120:	4618      	mov	r0, r3
 8004122:	f7fd fadf 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 8004126:	4b38      	ldr	r3, [pc, #224]	; (8004208 <LCD_Init+0x1d8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a37      	ldr	r2, [pc, #220]	; (8004208 <LCD_Init+0x1d8>)
 800412c:	8991      	ldrh	r1, [r2, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f7fd fad7 	bl	80016e4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 8004136:	4b34      	ldr	r3, [pc, #208]	; (8004208 <LCD_Init+0x1d8>)
 8004138:	889a      	ldrh	r2, [r3, #4]
 800413a:	4b33      	ldr	r3, [pc, #204]	; (8004208 <LCD_Init+0x1d8>)
 800413c:	88db      	ldrh	r3, [r3, #6]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 800413e:	4313      	orrs	r3, r2
 8004140:	b29a      	uxth	r2, r3
 8004142:	4b31      	ldr	r3, [pc, #196]	; (8004208 <LCD_Init+0x1d8>)
 8004144:	891b      	ldrh	r3, [r3, #8]
 8004146:	4313      	orrs	r3, r2
 8004148:	b29a      	uxth	r2, r3
 800414a:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <LCD_Init+0x1d8>)
 800414c:	895b      	ldrh	r3, [r3, #10]
 800414e:	4313      	orrs	r3, r2
 8004150:	b29a      	uxth	r2, r3
 8004152:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <LCD_Init+0x1d8>)
 8004154:	89db      	ldrh	r3, [r3, #14]
 8004156:	4313      	orrs	r3, r2
 8004158:	b29a      	uxth	r2, r3
			LCD16x2_CfgParam.EN_PIN;
 800415a:	4b2b      	ldr	r3, [pc, #172]	; (8004208 <LCD_Init+0x1d8>)
 800415c:	899b      	ldrh	r3, [r3, #12]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 800415e:	4313      	orrs	r3, r2
 8004160:	b29b      	uxth	r3, r3
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 8004162:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004164:	2301      	movs	r3, #1
 8004166:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004168:	2300      	movs	r3, #0
 800416a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800416c:	2302      	movs	r3, #2
 800416e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD16x2_CfgParam.LCD_GPIO, &GPIO_InitStruct);
 8004170:	4b25      	ldr	r3, [pc, #148]	; (8004208 <LCD_Init+0x1d8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f107 0210 	add.w	r2, r7, #16
 8004178:	4611      	mov	r1, r2
 800417a:	4618      	mov	r0, r3
 800417c:	f7fd f92e 	bl	80013dc <HAL_GPIO_Init>

	// The Init. Procedure As Described In The Datasheet
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 8004180:	4b21      	ldr	r3, [pc, #132]	; (8004208 <LCD_Init+0x1d8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a20      	ldr	r2, [pc, #128]	; (8004208 <LCD_Init+0x1d8>)
 8004186:	89d1      	ldrh	r1, [r2, #14]
 8004188:	2200      	movs	r2, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f7fd faaa 	bl	80016e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 8004190:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <LCD_Init+0x1d8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1c      	ldr	r2, [pc, #112]	; (8004208 <LCD_Init+0x1d8>)
 8004196:	8991      	ldrh	r1, [r2, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	4618      	mov	r0, r3
 800419c:	f7fd faa2 	bl	80016e4 <HAL_GPIO_WritePin>
    LCD_DATA(0x00);
 80041a0:	2000      	movs	r0, #0
 80041a2:	f7ff fe69 	bl	8003e78 <LCD_DATA>
    DWT_Delay_ms(150);
 80041a6:	2096      	movs	r0, #150	; 0x96
 80041a8:	f7ff fe2a 	bl	8003e00 <DWT_Delay_ms>
    LCD_CMD(0x03);
 80041ac:	2003      	movs	r0, #3
 80041ae:	f7ff fec7 	bl	8003f40 <LCD_CMD>
    DWT_Delay_ms(5);
 80041b2:	2005      	movs	r0, #5
 80041b4:	f7ff fe24 	bl	8003e00 <DWT_Delay_ms>
    LCD_CMD(0x03);
 80041b8:	2003      	movs	r0, #3
 80041ba:	f7ff fec1 	bl	8003f40 <LCD_CMD>
    DWT_Delay_us(150);
 80041be:	2096      	movs	r0, #150	; 0x96
 80041c0:	f7ff fdf6 	bl	8003db0 <DWT_Delay_us>
    LCD_CMD(0x03);
 80041c4:	2003      	movs	r0, #3
 80041c6:	f7ff febb 	bl	8003f40 <LCD_CMD>
    LCD_CMD(0x02);
 80041ca:	2002      	movs	r0, #2
 80041cc:	f7ff feb8 	bl	8003f40 <LCD_CMD>
    LCD_CMD(0x02);
 80041d0:	2002      	movs	r0, #2
 80041d2:	f7ff feb5 	bl	8003f40 <LCD_CMD>
    LCD_CMD(0x08);
 80041d6:	2008      	movs	r0, #8
 80041d8:	f7ff feb2 	bl	8003f40 <LCD_CMD>
    LCD_CMD(0x00);
 80041dc:	2000      	movs	r0, #0
 80041de:	f7ff feaf 	bl	8003f40 <LCD_CMD>
    LCD_CMD(0x0C);
 80041e2:	200c      	movs	r0, #12
 80041e4:	f7ff feac 	bl	8003f40 <LCD_CMD>
    LCD_CMD(0x00);
 80041e8:	2000      	movs	r0, #0
 80041ea:	f7ff fea9 	bl	8003f40 <LCD_CMD>
    LCD_CMD(0x06);
 80041ee:	2006      	movs	r0, #6
 80041f0:	f7ff fea6 	bl	8003f40 <LCD_CMD>
    LCD_CMD(0x00);
 80041f4:	2000      	movs	r0, #0
 80041f6:	f7ff fea3 	bl	8003f40 <LCD_CMD>
    LCD_CMD(0x01);
 80041fa:	2001      	movs	r0, #1
 80041fc:	f7ff fea0 	bl	8003f40 <LCD_CMD>
}
 8004200:	bf00      	nop
 8004202:	3720      	adds	r7, #32
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	080046fc 	.word	0x080046fc
 800420c:	40010800 	.word	0x40010800
 8004210:	40021000 	.word	0x40021000
 8004214:	40010c00 	.word	0x40010c00
 8004218:	40011000 	.word	0x40011000
 800421c:	40011400 	.word	0x40011400

08004220 <LCD_Write_Char>:
void LCD_Write_Char(char Data)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
   char Low4,High4;
   Low4  = Data & 0x0F;
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	73fb      	strb	r3, [r7, #15]
   High4 = Data & 0xF0;
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	f023 030f 	bic.w	r3, r3, #15
 8004238:	73bb      	strb	r3, [r7, #14]

   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 1);
 800423a:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <LCD_Write_Char+0xb0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a24      	ldr	r2, [pc, #144]	; (80042d0 <LCD_Write_Char+0xb0>)
 8004240:	89d1      	ldrh	r1, [r2, #14]
 8004242:	2201      	movs	r2, #1
 8004244:	4618      	mov	r0, r3
 8004246:	f7fd fa4d 	bl	80016e4 <HAL_GPIO_WritePin>

   LCD_DATA(High4>>4);
 800424a:	7bbb      	ldrb	r3, [r7, #14]
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	b2db      	uxtb	r3, r3
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff fe11 	bl	8003e78 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8004256:	4b1e      	ldr	r3, [pc, #120]	; (80042d0 <LCD_Write_Char+0xb0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1d      	ldr	r2, [pc, #116]	; (80042d0 <LCD_Write_Char+0xb0>)
 800425c:	8991      	ldrh	r1, [r2, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	4618      	mov	r0, r3
 8004262:	f7fd fa3f 	bl	80016e4 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8004266:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <LCD_Write_Char+0xb0>)
 8004268:	8a1b      	ldrh	r3, [r3, #16]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fda0 	bl	8003db0 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8004270:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <LCD_Write_Char+0xb0>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <LCD_Write_Char+0xb0>)
 8004276:	8991      	ldrh	r1, [r2, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f7fd fa32 	bl	80016e4 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8004280:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <LCD_Write_Char+0xb0>)
 8004282:	8a1b      	ldrh	r3, [r3, #16]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fd93 	bl	8003db0 <DWT_Delay_us>

   LCD_DATA(Low4);
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fdf3 	bl	8003e78 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <LCD_Write_Char+0xb0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <LCD_Write_Char+0xb0>)
 8004298:	8991      	ldrh	r1, [r2, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	4618      	mov	r0, r3
 800429e:	f7fd fa21 	bl	80016e4 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <LCD_Write_Char+0xb0>)
 80042a4:	8a1b      	ldrh	r3, [r3, #16]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff fd82 	bl	8003db0 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 80042ac:	4b08      	ldr	r3, [pc, #32]	; (80042d0 <LCD_Write_Char+0xb0>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a07      	ldr	r2, [pc, #28]	; (80042d0 <LCD_Write_Char+0xb0>)
 80042b2:	8991      	ldrh	r1, [r2, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fd fa14 	bl	80016e4 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80042bc:	4b04      	ldr	r3, [pc, #16]	; (80042d0 <LCD_Write_Char+0xb0>)
 80042be:	8a1b      	ldrh	r3, [r3, #16]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff fd75 	bl	8003db0 <DWT_Delay_us>
}
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	080046fc 	.word	0x080046fc

080042d4 <LCD_Write_String>:
void LCD_Write_String(char *str)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
    int i;
    for(i=0;str[i]!='\0';i++)
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	e009      	b.n	80042f6 <LCD_Write_String+0x22>
       LCD_Write_Char(str[i]);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	4413      	add	r3, r2
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff ff98 	bl	8004220 <LCD_Write_Char>
    for(i=0;str[i]!='\0';i++)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3301      	adds	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4413      	add	r3, r2
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1ef      	bne.n	80042e2 <LCD_Write_String+0xe>
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <menu_seleccion>:
uint8_t MSG_cajaND[50] = "ERROR : Caja no detectada en el segundo sensor\r\n";

// Especiales
uint8_t clear[] = "\e[2J";

void menu_seleccion(int opc, int vel) {
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]

	HAL_UART_Transmit(&huart3, clear, sizeof(clear), 100);
 8004316:	2364      	movs	r3, #100	; 0x64
 8004318:	2205      	movs	r2, #5
 800431a:	495a      	ldr	r1, [pc, #360]	; (8004484 <menu_seleccion+0x178>)
 800431c:	485a      	ldr	r0, [pc, #360]	; (8004488 <menu_seleccion+0x17c>)
 800431e:	f7fe feba 	bl	8003096 <HAL_UART_Transmit>

	// ===========================================================
	// Menu a mostrar cuando se inicia el sistema / Sistema detenido
	if (opc == 0 || opc == 4) {
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <menu_seleccion+0x22>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b04      	cmp	r3, #4
 800432c:	d139      	bne.n	80043a2 <menu_seleccion+0x96>
		if (opc == 0) {
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d118      	bne.n	8004366 <menu_seleccion+0x5a>
			HAL_UART_Transmit(&huart3, lineas, sizeof(lineas), 100);
 8004334:	2364      	movs	r3, #100	; 0x64
 8004336:	2232      	movs	r2, #50	; 0x32
 8004338:	4954      	ldr	r1, [pc, #336]	; (800448c <menu_seleccion+0x180>)
 800433a:	4853      	ldr	r0, [pc, #332]	; (8004488 <menu_seleccion+0x17c>)
 800433c:	f7fe feab 	bl	8003096 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, lineas, sizeof(lineas), 100);
 8004340:	2364      	movs	r3, #100	; 0x64
 8004342:	2232      	movs	r2, #50	; 0x32
 8004344:	4951      	ldr	r1, [pc, #324]	; (800448c <menu_seleccion+0x180>)
 8004346:	4850      	ldr	r0, [pc, #320]	; (8004488 <menu_seleccion+0x17c>)
 8004348:	f7fe fea5 	bl	8003096 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, saludo, sizeof(lineas), 100);
 800434c:	2364      	movs	r3, #100	; 0x64
 800434e:	2232      	movs	r2, #50	; 0x32
 8004350:	494f      	ldr	r1, [pc, #316]	; (8004490 <menu_seleccion+0x184>)
 8004352:	484d      	ldr	r0, [pc, #308]	; (8004488 <menu_seleccion+0x17c>)
 8004354:	f7fe fe9f 	bl	8003096 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, lineas, sizeof(lineas), 100);
 8004358:	2364      	movs	r3, #100	; 0x64
 800435a:	2232      	movs	r2, #50	; 0x32
 800435c:	494b      	ldr	r1, [pc, #300]	; (800448c <menu_seleccion+0x180>)
 800435e:	484a      	ldr	r0, [pc, #296]	; (8004488 <menu_seleccion+0x17c>)
 8004360:	f7fe fe99 	bl	8003096 <HAL_UART_Transmit>
 8004364:	e005      	b.n	8004372 <menu_seleccion+0x66>

		} else {
			HAL_UART_Transmit(&huart3, MSG_cajaND, sizeof(MSG_cajaND), 100);
 8004366:	2364      	movs	r3, #100	; 0x64
 8004368:	2232      	movs	r2, #50	; 0x32
 800436a:	494a      	ldr	r1, [pc, #296]	; (8004494 <menu_seleccion+0x188>)
 800436c:	4846      	ldr	r0, [pc, #280]	; (8004488 <menu_seleccion+0x17c>)
 800436e:	f7fe fe92 	bl	8003096 <HAL_UART_Transmit>

		}

		HAL_UART_Transmit(&huart3, blank, sizeof(lineas), 100);
 8004372:	2364      	movs	r3, #100	; 0x64
 8004374:	2232      	movs	r2, #50	; 0x32
 8004376:	4948      	ldr	r1, [pc, #288]	; (8004498 <menu_seleccion+0x18c>)
 8004378:	4843      	ldr	r0, [pc, #268]	; (8004488 <menu_seleccion+0x17c>)
 800437a:	f7fe fe8c 	bl	8003096 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, inicio, sizeof(lineas), 100);
 800437e:	2364      	movs	r3, #100	; 0x64
 8004380:	2232      	movs	r2, #50	; 0x32
 8004382:	4946      	ldr	r1, [pc, #280]	; (800449c <menu_seleccion+0x190>)
 8004384:	4840      	ldr	r0, [pc, #256]	; (8004488 <menu_seleccion+0x17c>)
 8004386:	f7fe fe86 	bl	8003096 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, opcn_1, sizeof(lineas), 100);
 800438a:	2364      	movs	r3, #100	; 0x64
 800438c:	2232      	movs	r2, #50	; 0x32
 800438e:	4944      	ldr	r1, [pc, #272]	; (80044a0 <menu_seleccion+0x194>)
 8004390:	483d      	ldr	r0, [pc, #244]	; (8004488 <menu_seleccion+0x17c>)
 8004392:	f7fe fe80 	bl	8003096 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, opcn_2, sizeof(lineas), 100);
 8004396:	2364      	movs	r3, #100	; 0x64
 8004398:	2232      	movs	r2, #50	; 0x32
 800439a:	4942      	ldr	r1, [pc, #264]	; (80044a4 <menu_seleccion+0x198>)
 800439c:	483a      	ldr	r0, [pc, #232]	; (8004488 <menu_seleccion+0x17c>)
 800439e:	f7fe fe7a 	bl	8003096 <HAL_UART_Transmit>
	}

	// ===========================================================
	// Seleccion de velocidades
	if (opc == 1) {
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d131      	bne.n	800440c <menu_seleccion+0x100>
		HAL_UART_Transmit(&huart3, blank, sizeof(lineas), 100);
 80043a8:	2364      	movs	r3, #100	; 0x64
 80043aa:	2232      	movs	r2, #50	; 0x32
 80043ac:	493a      	ldr	r1, [pc, #232]	; (8004498 <menu_seleccion+0x18c>)
 80043ae:	4836      	ldr	r0, [pc, #216]	; (8004488 <menu_seleccion+0x17c>)
 80043b0:	f7fe fe71 	bl	8003096 <HAL_UART_Transmit>

		// Condicionamos si se inicia de cero o es un cambio de velocidad
		if (vel == 0) {
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <menu_seleccion+0xbc>
			HAL_UART_Transmit(&huart3, opc1_1, sizeof(lineas), 100);
 80043ba:	2364      	movs	r3, #100	; 0x64
 80043bc:	2232      	movs	r2, #50	; 0x32
 80043be:	493a      	ldr	r1, [pc, #232]	; (80044a8 <menu_seleccion+0x19c>)
 80043c0:	4831      	ldr	r0, [pc, #196]	; (8004488 <menu_seleccion+0x17c>)
 80043c2:	f7fe fe68 	bl	8003096 <HAL_UART_Transmit>
 80043c6:	e005      	b.n	80043d4 <menu_seleccion+0xc8>
		} else {
			HAL_UART_Transmit(&huart3, opc1_2, sizeof(lineas), 100);
 80043c8:	2364      	movs	r3, #100	; 0x64
 80043ca:	2232      	movs	r2, #50	; 0x32
 80043cc:	4937      	ldr	r1, [pc, #220]	; (80044ac <menu_seleccion+0x1a0>)
 80043ce:	482e      	ldr	r0, [pc, #184]	; (8004488 <menu_seleccion+0x17c>)
 80043d0:	f7fe fe61 	bl	8003096 <HAL_UART_Transmit>
		}

		if (vel != 100) {
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b64      	cmp	r3, #100	; 0x64
 80043d8:	d005      	beq.n	80043e6 <menu_seleccion+0xda>
			HAL_UART_Transmit(&huart3, opc1_3, sizeof(lineas), 100);
 80043da:	2364      	movs	r3, #100	; 0x64
 80043dc:	2232      	movs	r2, #50	; 0x32
 80043de:	4934      	ldr	r1, [pc, #208]	; (80044b0 <menu_seleccion+0x1a4>)
 80043e0:	4829      	ldr	r0, [pc, #164]	; (8004488 <menu_seleccion+0x17c>)
 80043e2:	f7fe fe58 	bl	8003096 <HAL_UART_Transmit>
		}
		if (vel != 200) {
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2bc8      	cmp	r3, #200	; 0xc8
 80043ea:	d005      	beq.n	80043f8 <menu_seleccion+0xec>
			HAL_UART_Transmit(&huart3, opc1_4, sizeof(lineas), 100);
 80043ec:	2364      	movs	r3, #100	; 0x64
 80043ee:	2232      	movs	r2, #50	; 0x32
 80043f0:	4930      	ldr	r1, [pc, #192]	; (80044b4 <menu_seleccion+0x1a8>)
 80043f2:	4825      	ldr	r0, [pc, #148]	; (8004488 <menu_seleccion+0x17c>)
 80043f4:	f7fe fe4f 	bl	8003096 <HAL_UART_Transmit>
		}
		if (vel != 300) {
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80043fe:	d005      	beq.n	800440c <menu_seleccion+0x100>
			HAL_UART_Transmit(&huart3, opc1_5, sizeof(lineas), 100);
 8004400:	2364      	movs	r3, #100	; 0x64
 8004402:	2232      	movs	r2, #50	; 0x32
 8004404:	492c      	ldr	r1, [pc, #176]	; (80044b8 <menu_seleccion+0x1ac>)
 8004406:	4820      	ldr	r0, [pc, #128]	; (8004488 <menu_seleccion+0x17c>)
 8004408:	f7fe fe45 	bl	8003096 <HAL_UART_Transmit>

	}

	// ===========================================================
	// Cambio de la posicion de la barrera
	if (opc == 2) {
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d117      	bne.n	8004442 <menu_seleccion+0x136>
		HAL_UART_Transmit(&huart3, blank, sizeof(lineas), 100);
 8004412:	2364      	movs	r3, #100	; 0x64
 8004414:	2232      	movs	r2, #50	; 0x32
 8004416:	4920      	ldr	r1, [pc, #128]	; (8004498 <menu_seleccion+0x18c>)
 8004418:	481b      	ldr	r0, [pc, #108]	; (8004488 <menu_seleccion+0x17c>)
 800441a:	f7fe fe3c 	bl	8003096 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, opc2_1, sizeof(lineas), 100);
 800441e:	2364      	movs	r3, #100	; 0x64
 8004420:	2232      	movs	r2, #50	; 0x32
 8004422:	4926      	ldr	r1, [pc, #152]	; (80044bc <menu_seleccion+0x1b0>)
 8004424:	4818      	ldr	r0, [pc, #96]	; (8004488 <menu_seleccion+0x17c>)
 8004426:	f7fe fe36 	bl	8003096 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, opc2_2, sizeof(lineas), 100);
 800442a:	2364      	movs	r3, #100	; 0x64
 800442c:	2232      	movs	r2, #50	; 0x32
 800442e:	4924      	ldr	r1, [pc, #144]	; (80044c0 <menu_seleccion+0x1b4>)
 8004430:	4815      	ldr	r0, [pc, #84]	; (8004488 <menu_seleccion+0x17c>)
 8004432:	f7fe fe30 	bl	8003096 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, opc2_3, sizeof(lineas), 100);
 8004436:	2364      	movs	r3, #100	; 0x64
 8004438:	2232      	movs	r2, #50	; 0x32
 800443a:	4922      	ldr	r1, [pc, #136]	; (80044c4 <menu_seleccion+0x1b8>)
 800443c:	4812      	ldr	r0, [pc, #72]	; (8004488 <menu_seleccion+0x17c>)
 800443e:	f7fe fe2a 	bl	8003096 <HAL_UART_Transmit>
	}

	// ===========================================================
	// Sistema en marcha
	if (opc == 3) {
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b03      	cmp	r3, #3
 8004446:	d118      	bne.n	800447a <menu_seleccion+0x16e>
		HAL_UART_Transmit(&huart3, lineas, sizeof(lineas), 100);
 8004448:	2364      	movs	r3, #100	; 0x64
 800444a:	2232      	movs	r2, #50	; 0x32
 800444c:	490f      	ldr	r1, [pc, #60]	; (800448c <menu_seleccion+0x180>)
 800444e:	480e      	ldr	r0, [pc, #56]	; (8004488 <menu_seleccion+0x17c>)
 8004450:	f7fe fe21 	bl	8003096 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, inicio, sizeof(lineas), 100);
 8004454:	2364      	movs	r3, #100	; 0x64
 8004456:	2232      	movs	r2, #50	; 0x32
 8004458:	4910      	ldr	r1, [pc, #64]	; (800449c <menu_seleccion+0x190>)
 800445a:	480b      	ldr	r0, [pc, #44]	; (8004488 <menu_seleccion+0x17c>)
 800445c:	f7fe fe1b 	bl	8003096 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, opcn_0, sizeof(lineas), 100);
 8004460:	2364      	movs	r3, #100	; 0x64
 8004462:	2232      	movs	r2, #50	; 0x32
 8004464:	4918      	ldr	r1, [pc, #96]	; (80044c8 <menu_seleccion+0x1bc>)
 8004466:	4808      	ldr	r0, [pc, #32]	; (8004488 <menu_seleccion+0x17c>)
 8004468:	f7fe fe15 	bl	8003096 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, opcn_3, sizeof(lineas), 100);
 800446c:	2364      	movs	r3, #100	; 0x64
 800446e:	2232      	movs	r2, #50	; 0x32
 8004470:	4916      	ldr	r1, [pc, #88]	; (80044cc <menu_seleccion+0x1c0>)
 8004472:	4805      	ldr	r0, [pc, #20]	; (8004488 <menu_seleccion+0x17c>)
 8004474:	f7fe fe0f 	bl	8003096 <HAL_UART_Transmit>
	}

	return;
 8004478:	bf00      	nop
 800447a:	bf00      	nop
}
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000490 	.word	0x20000490
 8004488:	200005c0 	.word	0x200005c0
 800448c:	2000011c 	.word	0x2000011c
 8004490:	20000150 	.word	0x20000150
 8004494:	2000045c 	.word	0x2000045c
 8004498:	20000184 	.word	0x20000184
 800449c:	200001b8 	.word	0x200001b8
 80044a0:	20000220 	.word	0x20000220
 80044a4:	20000254 	.word	0x20000254
 80044a8:	200002bc 	.word	0x200002bc
 80044ac:	200002f0 	.word	0x200002f0
 80044b0:	20000324 	.word	0x20000324
 80044b4:	20000358 	.word	0x20000358
 80044b8:	2000038c 	.word	0x2000038c
 80044bc:	200003c0 	.word	0x200003c0
 80044c0:	200003f4 	.word	0x200003f4
 80044c4:	20000428 	.word	0x20000428
 80044c8:	200001ec 	.word	0x200001ec
 80044cc:	20000288 	.word	0x20000288

080044d0 <init_stepper>:
		{GPIO_PIN_3,GPIO_PIN_4,GPIO_PIN_5,GPIO_PIN_6}
};


// Da un pulso al stepper en un sentido u otro
void init_stepper(int pulse, int dir) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
	if (dir == 1) {
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d12b      	bne.n	8004538 <init_stepper+0x68>
		HAL_GPIO_WritePin(STEPPER.gpio_port[0], STEPPER.in_pin[0],
 80044e0:	482d      	ldr	r0, [pc, #180]	; (8004598 <init_stepper+0xc8>)
 80044e2:	2308      	movs	r3, #8
 80044e4:	b299      	uxth	r1, r3
				full_step[pulse][0]);
 80044e6:	4a2d      	ldr	r2, [pc, #180]	; (800459c <init_stepper+0xcc>)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
		HAL_GPIO_WritePin(STEPPER.gpio_port[0], STEPPER.in_pin[0],
 80044ee:	461a      	mov	r2, r3
 80044f0:	f7fd f8f8 	bl	80016e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER.gpio_port[1], STEPPER.in_pin[1],
 80044f4:	4828      	ldr	r0, [pc, #160]	; (8004598 <init_stepper+0xc8>)
 80044f6:	2310      	movs	r3, #16
 80044f8:	b299      	uxth	r1, r3
				full_step[pulse][1]);
 80044fa:	4a28      	ldr	r2, [pc, #160]	; (800459c <init_stepper+0xcc>)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	785b      	ldrb	r3, [r3, #1]
		HAL_GPIO_WritePin(STEPPER.gpio_port[1], STEPPER.in_pin[1],
 8004504:	461a      	mov	r2, r3
 8004506:	f7fd f8ed 	bl	80016e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER.gpio_port[2], STEPPER.in_pin[2],
 800450a:	4823      	ldr	r0, [pc, #140]	; (8004598 <init_stepper+0xc8>)
 800450c:	2320      	movs	r3, #32
 800450e:	b299      	uxth	r1, r3
				full_step[pulse][2]);
 8004510:	4a22      	ldr	r2, [pc, #136]	; (800459c <init_stepper+0xcc>)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	789b      	ldrb	r3, [r3, #2]
		HAL_GPIO_WritePin(STEPPER.gpio_port[2], STEPPER.in_pin[2],
 800451a:	461a      	mov	r2, r3
 800451c:	f7fd f8e2 	bl	80016e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER.gpio_port[3], STEPPER.in_pin[3],
 8004520:	481d      	ldr	r0, [pc, #116]	; (8004598 <init_stepper+0xc8>)
 8004522:	2340      	movs	r3, #64	; 0x40
 8004524:	b299      	uxth	r1, r3
				full_step[pulse][3]);
 8004526:	4a1d      	ldr	r2, [pc, #116]	; (800459c <init_stepper+0xcc>)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	78db      	ldrb	r3, [r3, #3]
		HAL_GPIO_WritePin(STEPPER.gpio_port[3], STEPPER.in_pin[3],
 8004530:	461a      	mov	r2, r3
 8004532:	f7fd f8d7 	bl	80016e4 <HAL_GPIO_WritePin>
				full_step_inv[pulse][2]);
		HAL_GPIO_WritePin(STEPPER.gpio_port[3], STEPPER.in_pin[3],
				full_step_inv[pulse][3]);
	}

}
 8004536:	e02a      	b.n	800458e <init_stepper+0xbe>
		HAL_GPIO_WritePin(STEPPER.gpio_port[0], STEPPER.in_pin[0],
 8004538:	4817      	ldr	r0, [pc, #92]	; (8004598 <init_stepper+0xc8>)
 800453a:	2308      	movs	r3, #8
 800453c:	b299      	uxth	r1, r3
				full_step_inv[pulse][0]);
 800453e:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <init_stepper+0xd0>)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
		HAL_GPIO_WritePin(STEPPER.gpio_port[0], STEPPER.in_pin[0],
 8004546:	461a      	mov	r2, r3
 8004548:	f7fd f8cc 	bl	80016e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER.gpio_port[1], STEPPER.in_pin[1],
 800454c:	4812      	ldr	r0, [pc, #72]	; (8004598 <init_stepper+0xc8>)
 800454e:	2310      	movs	r3, #16
 8004550:	b299      	uxth	r1, r3
				full_step_inv[pulse][1]);
 8004552:	4a13      	ldr	r2, [pc, #76]	; (80045a0 <init_stepper+0xd0>)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	785b      	ldrb	r3, [r3, #1]
		HAL_GPIO_WritePin(STEPPER.gpio_port[1], STEPPER.in_pin[1],
 800455c:	461a      	mov	r2, r3
 800455e:	f7fd f8c1 	bl	80016e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER.gpio_port[2], STEPPER.in_pin[2],
 8004562:	480d      	ldr	r0, [pc, #52]	; (8004598 <init_stepper+0xc8>)
 8004564:	2320      	movs	r3, #32
 8004566:	b299      	uxth	r1, r3
				full_step_inv[pulse][2]);
 8004568:	4a0d      	ldr	r2, [pc, #52]	; (80045a0 <init_stepper+0xd0>)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	789b      	ldrb	r3, [r3, #2]
		HAL_GPIO_WritePin(STEPPER.gpio_port[2], STEPPER.in_pin[2],
 8004572:	461a      	mov	r2, r3
 8004574:	f7fd f8b6 	bl	80016e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER.gpio_port[3], STEPPER.in_pin[3],
 8004578:	4807      	ldr	r0, [pc, #28]	; (8004598 <init_stepper+0xc8>)
 800457a:	2340      	movs	r3, #64	; 0x40
 800457c:	b299      	uxth	r1, r3
				full_step_inv[pulse][3]);
 800457e:	4a08      	ldr	r2, [pc, #32]	; (80045a0 <init_stepper+0xd0>)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	78db      	ldrb	r3, [r3, #3]
		HAL_GPIO_WritePin(STEPPER.gpio_port[3], STEPPER.in_pin[3],
 8004588:	461a      	mov	r2, r3
 800458a:	f7fd f8ab 	bl	80016e4 <HAL_GPIO_WritePin>
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40010800 	.word	0x40010800
 800459c:	20000498 	.word	0x20000498
 80045a0:	200004a8 	.word	0x200004a8

080045a4 <stop_stepper>:

void stop_stepper() {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEPPER.gpio_port[0], STEPPER.in_pin[0], 0);
 80045a8:	480e      	ldr	r0, [pc, #56]	; (80045e4 <stop_stepper+0x40>)
 80045aa:	2308      	movs	r3, #8
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2200      	movs	r2, #0
 80045b0:	4619      	mov	r1, r3
 80045b2:	f7fd f897 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEPPER.gpio_port[1], STEPPER.in_pin[1], 0);
 80045b6:	480b      	ldr	r0, [pc, #44]	; (80045e4 <stop_stepper+0x40>)
 80045b8:	2310      	movs	r3, #16
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2200      	movs	r2, #0
 80045be:	4619      	mov	r1, r3
 80045c0:	f7fd f890 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEPPER.gpio_port[2], STEPPER.in_pin[2], 0);
 80045c4:	4807      	ldr	r0, [pc, #28]	; (80045e4 <stop_stepper+0x40>)
 80045c6:	2320      	movs	r3, #32
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2200      	movs	r2, #0
 80045cc:	4619      	mov	r1, r3
 80045ce:	f7fd f889 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEPPER.gpio_port[3], STEPPER.in_pin[3], 0);
 80045d2:	4804      	ldr	r0, [pc, #16]	; (80045e4 <stop_stepper+0x40>)
 80045d4:	2340      	movs	r3, #64	; 0x40
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2200      	movs	r2, #0
 80045da:	4619      	mov	r1, r3
 80045dc:	f7fd f882 	bl	80016e4 <HAL_GPIO_WritePin>
}
 80045e0:	bf00      	nop
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40010800 	.word	0x40010800

080045e8 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80045ec:	4b14      	ldr	r3, [pc, #80]	; (8004640 <DWT_Delay_Init+0x58>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	4a13      	ldr	r2, [pc, #76]	; (8004640 <DWT_Delay_Init+0x58>)
 80045f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045f6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80045f8:	4b11      	ldr	r3, [pc, #68]	; (8004640 <DWT_Delay_Init+0x58>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4a10      	ldr	r2, [pc, #64]	; (8004640 <DWT_Delay_Init+0x58>)
 80045fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004602:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8004604:	4b0f      	ldr	r3, [pc, #60]	; (8004644 <DWT_Delay_Init+0x5c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a0e      	ldr	r2, [pc, #56]	; (8004644 <DWT_Delay_Init+0x5c>)
 800460a:	f023 0301 	bic.w	r3, r3, #1
 800460e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8004610:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <DWT_Delay_Init+0x5c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a0b      	ldr	r2, [pc, #44]	; (8004644 <DWT_Delay_Init+0x5c>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800461c:	4b09      	ldr	r3, [pc, #36]	; (8004644 <DWT_Delay_Init+0x5c>)
 800461e:	2200      	movs	r2, #0
 8004620:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8004622:	bf00      	nop
    __ASM volatile ("NOP");
 8004624:	bf00      	nop
    __ASM volatile ("NOP");
 8004626:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <DWT_Delay_Init+0x5c>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8004630:	2300      	movs	r3, #0
 8004632:	e000      	b.n	8004636 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8004634:	2301      	movs	r3, #1
    }
}
 8004636:	4618      	mov	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	e000edf0 	.word	0xe000edf0
 8004644:	e0001000 	.word	0xe0001000

08004648 <__libc_init_array>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	2600      	movs	r6, #0
 800464c:	4d0c      	ldr	r5, [pc, #48]	; (8004680 <__libc_init_array+0x38>)
 800464e:	4c0d      	ldr	r4, [pc, #52]	; (8004684 <__libc_init_array+0x3c>)
 8004650:	1b64      	subs	r4, r4, r5
 8004652:	10a4      	asrs	r4, r4, #2
 8004654:	42a6      	cmp	r6, r4
 8004656:	d109      	bne.n	800466c <__libc_init_array+0x24>
 8004658:	f000 f822 	bl	80046a0 <_init>
 800465c:	2600      	movs	r6, #0
 800465e:	4d0a      	ldr	r5, [pc, #40]	; (8004688 <__libc_init_array+0x40>)
 8004660:	4c0a      	ldr	r4, [pc, #40]	; (800468c <__libc_init_array+0x44>)
 8004662:	1b64      	subs	r4, r4, r5
 8004664:	10a4      	asrs	r4, r4, #2
 8004666:	42a6      	cmp	r6, r4
 8004668:	d105      	bne.n	8004676 <__libc_init_array+0x2e>
 800466a:	bd70      	pop	{r4, r5, r6, pc}
 800466c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004670:	4798      	blx	r3
 8004672:	3601      	adds	r6, #1
 8004674:	e7ee      	b.n	8004654 <__libc_init_array+0xc>
 8004676:	f855 3b04 	ldr.w	r3, [r5], #4
 800467a:	4798      	blx	r3
 800467c:	3601      	adds	r6, #1
 800467e:	e7f2      	b.n	8004666 <__libc_init_array+0x1e>
 8004680:	08004710 	.word	0x08004710
 8004684:	08004710 	.word	0x08004710
 8004688:	08004710 	.word	0x08004710
 800468c:	08004714 	.word	0x08004714

08004690 <memset>:
 8004690:	4603      	mov	r3, r0
 8004692:	4402      	add	r2, r0
 8004694:	4293      	cmp	r3, r2
 8004696:	d100      	bne.n	800469a <memset+0xa>
 8004698:	4770      	bx	lr
 800469a:	f803 1b01 	strb.w	r1, [r3], #1
 800469e:	e7f9      	b.n	8004694 <memset+0x4>

080046a0 <_init>:
 80046a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a2:	bf00      	nop
 80046a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a6:	bc08      	pop	{r3}
 80046a8:	469e      	mov	lr, r3
 80046aa:	4770      	bx	lr

080046ac <_fini>:
 80046ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ae:	bf00      	nop
 80046b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b2:	bc08      	pop	{r3}
 80046b4:	469e      	mov	lr, r3
 80046b6:	4770      	bx	lr
